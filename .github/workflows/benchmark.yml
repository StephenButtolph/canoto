name: Benchmarks
on:
  pull_request:
  workflow_dispatch:
    inputs:
      old:
        description: 'Old'
        required: false
        default: 'main'
      new:
        description: 'New'
        required: true

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ (github.event.inputs.new != '') && github.event.inputs.new || github.event.ref }}
      - uses: ./.github/actions/setup-go-for-project


      - name: Install benchstat
        run: go install golang.org/x/perf/cmd/benchstat@latest

      - name: Run benchmarks
        run: go test -bench=. -benchmem -count=1  ./... > new.txt

      - name: Run benchmark for base code
        run: |
          git fetch origin main ${{ github.event.pull_request.base.sha }}
          HEAD=$(git rev-parse HEAD)
          git reset --hard ${{ github.event.pull_request.base.sha }}
          go test -bench=. -benchmem -count=1  ./... > old.txt
          git reset --hard $HEAD

      - name: Compare benchmarks
        run: |
          OUTPUT=$(benchstat old.txt new.txt)
          echo "diff<<EOF" >> $GITHUB_OUTPUT && echo "$OUTPUT" >> $GITHUB_OUTPUT && echo "EOF" >> $GITHUB_OUTPUT
          echo "result<<EOF" >> $GITHUB_OUTPUT && echo "$OUTPUT" >> $GITHUB_OUTPUT && echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment benchmark result
        continue-on-error: true
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          header: bench
          message: |
            ### Benchmark Result
            <details><summary>Benchmark diff with base branch</summary>

            ```
            ${{ steps.bench.outputs.diff }}
            ```
            </details>

            <details><summary>Benchmark result</summary>

            ```
            ${{ steps.bench.outputs.result }}
            ```
            </details>