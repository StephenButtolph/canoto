package generate

import (
	"encoding/hex"
	"fmt"
	"io"
	"os"
	"strings"

	"github.com/StephenButtolph/canoto"
)

const (
	fileTemplate = `// Code generated by Canoto. DO NOT EDIT.

package ${package}

import (
	"unicode/utf8"

	"github.com/StephenButtolph/canoto"
)

// Ensure that "unicode/utf8" is imported without error
var _ = utf8.ValidString
`

	structTemplate = `
const (
${tagConstants}
${tagSizeConstants})

type canotoData_${structName} struct {
	size int
${sizeCache}}


func (c *${structName}) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(&r)
}

func (c *${structName}) UnmarshalCanotoFrom(r *canoto.Reader) error {
	var minField uint32
	for canoto.HasNext(r) {
		field, wireType, err := canoto.ReadTag(r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
${unmarshalCases}		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

func (c *${structName}) ValidCanoto() bool {
${validIfs}	return true
}

func (c *${structName}) CalculateCanotoSize() int {
	c.canotoData.size = 0
${sizeIfs}	return c.canotoData.size
}

func (c *${structName}) CachedCanotoSize() int {
	return c.canotoData.size
}

func (c *${structName}) MarshalCanoto() []byte {
	w := canoto.Writer{
		B: make([]byte, 0, c.CalculateCanotoSize()),
	}
	c.MarshalCanotoInto(&w)
	return w.B
}

func (c *${structName}) MarshalCanotoInto(w *canoto.Writer) {
${marshalIfs}}
`

	unmarshalCaseSimpleTemplate = `		case ${fieldNumber}:
			if wireType != canoto.${wireType} {
				return canoto.ErrInvalidWireType
			}
			c.${fieldName}, err = canoto.Read${readFunction}(r)
			if err != nil {
				return err
			}
			if c.${fieldName} == 0 {
				return canoto.ErrZeroValue
			}
`

	unmarshalCaseRepeatedSimpleTemplate = `		case ${fieldNumber}:
			if wireType != canoto.Len {
				return canoto.ErrInvalidWireType
			}

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			msgBytes, err := canoto.ReadBytes(r)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			c.${fieldName} = make([]${goType}, 0, canoto.CountInts(msgBytes))
			for canoto.HasNext(r) {
				v, err := canoto.Read${readFunction}(r)
				if err != nil {
					r.B = remainingBytes
					return err
				}
				c.${fieldName} = append(c.${fieldName}, v)
			}
			r.B = remainingBytes
`

	unmarshalCaseRepeatedFixedSizeTemplate = `		case ${fieldNumber}:
			if wireType != canoto.Len {
				return canoto.ErrInvalidWireType
			}

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			msgBytes, err := canoto.ReadBytes(r)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			numMsgBytes := len(msgBytes)
			if numMsgBytes == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			c.${fieldName} = make([]${goType}, 0, numMsgBytes / canoto.Size${sizeConstant})
			for canoto.HasNext(r) {
				v, err := canoto.Read${readFunction}(r)
				if err != nil {
					r.B = remainingBytes
					return err
				}
				c.${fieldName} = append(c.${fieldName}, v)
			}
			r.B = remainingBytes
`

	unmarshalCaseBoolTemplate = `		case ${fieldNumber}:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			c.${fieldName}, err = canoto.ReadBool(r)
			if err != nil {
				return err
			}
			if !c.${fieldName} {
				return canoto.ErrZeroValue
			}
`

	unmarshalCaseBytesTemplate = `		case ${fieldNumber}:
			if wireType != canoto.${wireType} {
				return canoto.ErrInvalidWireType
			}
			c.${fieldName}, err = canoto.Read${readFunction}(r)
			if err != nil {
				return err
			}
			if len(c.${fieldName}) == 0 {
				return canoto.ErrZeroValue
			}
`

	unmarshalCaseRepeatedBytesTemplate = `		case ${fieldNumber}:
			if wireType != canoto.Len {
				return canoto.ErrInvalidWireType
			}

			v, err := canoto.Read${readFunction}(r)
			if err != nil {
				return err
			}

			count, err := canoto.CountBytes(r.B, canoto__${escapedStructName}__${escapedFieldName}__tag)
			if err != nil {
				return err
			}

			c.${fieldName} = make([]${goType}, 1, 1 + count)
			c.${fieldName}[0] = v
			for range count {
				r.B = r.B[canoto__${escapedStructName}__${escapedFieldName}__tag__size:]
				v, err := canoto.Read${readFunction}(r)
				if err != nil {
					return err
				}
				c.${fieldName} = append(c.${fieldName}, v)
			}
`

	unmarshalCaseCustomTemplate = `		case ${fieldNumber}:
			if wireType != canoto.Len {
				return canoto.ErrInvalidWireType
			}

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			msgBytes, err := canoto.ReadBytes(r)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			err = c.${fieldName}.UnmarshalCanotoFrom(r)
			r.B = remainingBytes
			if err != nil {
				return err
			}
`

	unmarshalCaseRepeatedCustomTemplate = `		case ${fieldNumber}:
			if wireType != canoto.Len {
				return canoto.ErrInvalidWireType
			}

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			msgBytes, err := canoto.ReadBytes(r)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}

			remainingBytes := r.B
			count, err := canoto.CountBytes(remainingBytes, canoto__${escapedStructName}__${escapedFieldName}__tag)
			if err != nil {
				return err
			}

			c.${fieldName} = make([]${goType}, 1 + count)
			r.B = msgBytes
			err = c.${fieldName}[0].UnmarshalCanotoFrom(r)
			r.B = remainingBytes
			if err != nil {
				return err
			}

			for i := range count {
				r.B = r.B[canoto__${escapedStructName}__${escapedFieldName}__tag__size:]
				r.Unsafe = true
				msgBytes, err := canoto.ReadBytes(r)
				r.Unsafe = originalUnsafe
				if err != nil {
					return err
				}

				remainingBytes := r.B
				r.B = msgBytes
				err = c.${fieldName}[1+i].UnmarshalCanotoFrom(r)
				r.B = remainingBytes
				if err != nil {
					return err
				}
			}
`

	sizeIfSimpleTemplate = `	if c.${fieldName} != 0 {
		c.canotoData.size += canoto__${escapedStructName}__${escapedFieldName}__tag__size + canoto.Size${sizeFunction}(c.${fieldName})
	}
`

	sizeIfRepeatedSimpleTemplate = `	if len(c.${fieldName}) != 0 {
		c.canotoData.${fieldName}Size = 0
		for _, v := range c.${fieldName} {
			c.canotoData.${fieldName}Size += canoto.Size${sizeFunction}(v)
		}
		c.canotoData.size += canoto__${escapedStructName}__${escapedFieldName}__tag__size + canoto.SizeInt(int64(c.canotoData.${fieldName}Size)) + c.canotoData.${fieldName}Size
	}
`

	sizeIfFixedSizeTemplate = `	if c.${fieldName} != 0 {
		c.canotoData.size += canoto__${escapedStructName}__${escapedFieldName}__tag__size + canoto.Size${sizeConstant}
	}
`

	sizeIfRepeatedFixedSizeTemplate = `	if num := len(c.${fieldName}); num != 0 {
		fieldSize := num * canoto.Size${sizeConstant}
		c.canotoData.size += canoto__${escapedStructName}__${escapedFieldName}__tag__size + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
`

	sizeIfBoolTemplate = `	if c.${fieldName} {
		c.canotoData.size += canoto__${escapedStructName}__${escapedFieldName}__tag__size + canoto.SizeBool
	}
`

	sizeIfBytesTemplate = `	if len(c.${fieldName}) != 0 {
		c.canotoData.size += canoto__${escapedStructName}__${escapedFieldName}__tag__size + canoto.SizeBytes(c.${fieldName})
	}
`

	sizeIfRepeatedBytesTemplate = `	for _, v := range c.${fieldName} {
		c.canotoData.size += canoto__${escapedStructName}__${escapedFieldName}__tag__size + canoto.SizeBytes(v)
	}
`

	sizeIfCustomTemplate = `	if fieldSize := c.${fieldName}.CalculateCanotoSize(); fieldSize != 0 {
		c.canotoData.size += canoto__${escapedStructName}__${escapedFieldName}__tag__size + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
`

	sizeIfRepeatedCustomTemplate = `	for i := range c.${fieldName} {
		fieldSize := c.${fieldName}[i].CalculateCanotoSize()
		c.canotoData.size += canoto__${escapedStructName}__${escapedFieldName}__tag__size + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
`

	marshalIfIntTemplate = `	if c.${fieldName} != 0 {
		canoto.Append(w, canoto__${escapedStructName}__${escapedFieldName}__tag)
		canoto.Append${sizeFunction}(w, c.${fieldName})
	}
`

	marshalIfRepeatedIntTemplate = `	if len(c.${fieldName}) != 0 {
		canoto.Append(w, canoto__${escapedStructName}__${escapedFieldName}__tag)
		canoto.AppendInt(w, int64(c.canotoData.${fieldName}Size))
		for _, v := range c.${fieldName} {
			canoto.Append${sizeFunction}(w, v)
		}
	}
`

	marshalIfFintTemplate = `	if c.${fieldName} != 0 {
		canoto.Append(w, canoto__${escapedStructName}__${escapedFieldName}__tag)
		canoto.Append${sizeConstant}(w, c.${fieldName})
	}
`

	marshalIfRepeatedFixedSizeTemplate = `	if num := len(c.${fieldName}); num != 0 {
		canoto.Append(w, canoto__${escapedStructName}__${escapedFieldName}__tag)
		canoto.AppendInt(w, int64(num * canoto.Size${sizeConstant}))
		for _, v := range c.${fieldName} {
			canoto.Append${sizeConstant}(w, v)
		}
	}
`

	marshalIfBoolTemplate = `	if c.${fieldName} {
		canoto.Append(w, canoto__${escapedStructName}__${escapedFieldName}__tag)
		canoto.AppendBool(w, true)
	}
`

	marshalIfBytesTemplate = `	if len(c.${fieldName}) != 0 {
		canoto.Append(w, canoto__${escapedStructName}__${escapedFieldName}__tag)
		canoto.AppendBytes(w, c.${fieldName})
	}
`

	marshalIfRepeatedBytesTemplate = `	for _, v := range c.${fieldName} {
		canoto.Append(w, canoto__${escapedStructName}__${escapedFieldName}__tag)
		canoto.AppendBytes(w, v)
	}
`

	marshalIfCustomTemplate = `	if fieldSize := c.${fieldName}.CachedCanotoSize(); fieldSize != 0 {
		canoto.Append(w, canoto__${escapedStructName}__${escapedFieldName}__tag)
		canoto.AppendInt(w, int64(fieldSize))
		c.${fieldName}.MarshalCanotoInto(w)
	}
`

	marshalIfRepeatedCustomTemplate = `	for i := range c.${fieldName} {
		canoto.Append(w, canoto__${escapedStructName}__${escapedFieldName}__tag)
		canoto.AppendInt(w, int64(c.${fieldName}[i].CachedCanotoSize()))
		c.${fieldName}[i].MarshalCanotoInto(w)
	}
`
)

func write(w io.Writer, packageName string, messages []message) error {
	err := writeTemplate(w, fileTemplate, map[string]string{
		"package": packageName,
	})
	if err != nil {
		return err
	}

	for _, m := range messages {
		if err := writeStruct(w, m); err != nil {
			return err
		}
	}
	return nil
}

func writeStruct(w io.Writer, m message) error {
	tagConstants, err := makeTagConstants(m)
	if err != nil {
		return err
	}
	unmarshalCases, err := makeUnmarshalCases(m)
	if err != nil {
		return err
	}
	sizeIfs, err := makeSizeIfs(m)
	if err != nil {
		return err
	}
	marshalIfs, err := makeMarshalIfs(m)
	if err != nil {
		return err
	}

	return writeTemplate(w, structTemplate, map[string]string{
		"tagConstants":     tagConstants,
		"tagSizeConstants": makeTagSizeConstants(m),
		"structName":       m.name,
		"sizeCache":        makeSizeCache(m),
		"unmarshalCases":   unmarshalCases,
		"validIfs":         makeValidIfs(m),
		"sizeIfs":          sizeIfs,
		"marshalIfs":       marshalIfs,
	})
}

func makeTagConstants(m message) (string, error) {
	var tagConstants strings.Builder
	for _, f := range m.fields {
		_, _ = fmt.Fprintf(
			&tagConstants,
			`	canoto__%s__%s__tag = "`,
			m.canonicalizedName,
			f.canonicalizedName,
		)

		wireType, err := f.WireType()
		if err != nil {
			return "", err
		}

		tagBytes := canoto.Tag(f.fieldNumber, wireType)
		tagHex := hex.EncodeToString(tagBytes)
		for i := 0; i < len(tagHex); i += 2 {
			_, _ = fmt.Fprintf(&tagConstants, "\\x%s", tagHex[i:i+2])
		}
		_, _ = fmt.Fprintf(
			&tagConstants,
			"\" // canoto.Tag(%d, canoto.%s)\n",
			f.fieldNumber,
			wireType,
		)
	}
	return tagConstants.String(), nil
}

func makeTagSizeConstants(m message) string {
	var tagSizeConstants strings.Builder
	for _, f := range m.fields {
		_, _ = fmt.Fprintf(
			&tagSizeConstants,
			"\tcanoto__%s__%s__tag__size = len(canoto__%s__%s__tag)\n",
			m.canonicalizedName,
			f.canonicalizedName,
			m.canonicalizedName,
			f.canonicalizedName,
		)
	}
	return tagSizeConstants.String()
}

func makeSizeCache(m message) string {
	var sizeCache strings.Builder
	for _, f := range m.fields {
		if !f.repeated || !f.canotoType.IsVarint() {
			continue
		}

		_, _ = fmt.Fprintf(
			&sizeCache,
			"\t%sSize int\n",
			f.name,
		)
	}
	return sizeCache.String()
}

func makeUnmarshalCases(m message) (string, error) {
	var unmarshalCases strings.Builder
	for _, f := range m.fields {
		var template string
		if f.repeated {
			switch f.canotoType {
			case canotoInt, canotoSint:
				template = unmarshalCaseRepeatedSimpleTemplate
			case canotoFint, canotoBool:
				template = unmarshalCaseRepeatedFixedSizeTemplate
			case canotoBytes:
				switch f.goType {
				case goString, goBytes:
					template = unmarshalCaseRepeatedBytesTemplate
				default:
					template = unmarshalCaseRepeatedCustomTemplate
				}
			default:
				return "", fmt.Errorf("%w: %q", errUnexpectedCanotoType, f.canotoType)
			}
		} else {
			switch f.canotoType {
			case canotoInt, canotoSint, canotoFint:
				template = unmarshalCaseSimpleTemplate
			case canotoBool:
				template = unmarshalCaseBoolTemplate
			case canotoBytes:
				switch f.goType {
				case goString, goBytes:
					template = unmarshalCaseBytesTemplate
				default:
					template = unmarshalCaseCustomTemplate
				}
			default:
				return "", fmt.Errorf("%w: %q", errUnexpectedCanotoType, f.canotoType)
			}
		}
		_ = writeTemplate(&unmarshalCases, template, f.templateArgs)
	}
	return unmarshalCases.String(), nil
}

func makeValidIfs(m message) string {
	const repeated = true
	var (
		stringTemplates = map[bool]string{
			!repeated: `	if !utf8.ValidString(c.${fieldName}) {
		return false
	}
`,
			repeated: `	for _, v := range c.${fieldName} {
		if !utf8.ValidString(v) {
			return false
		}
	}
`,
		}
		customTemplates = map[bool]string{
			!repeated: `	if !c.${fieldName}.ValidCanoto() {
		return false
	}
`,
			repeated: `	for i := range c.${fieldName} {
		if !c.${fieldName}[i].ValidCanoto() {
			return false
		}
	}
`,
		}
		validIfs strings.Builder
	)
	for _, f := range m.fields {
		if f.canotoType != canotoBytes || f.goType == goBytes {
			continue
		}

		// goType is either string or a custom type
		var template string
		if f.goType == goString {
			template = stringTemplates[f.repeated]
		} else {
			template = customTemplates[f.repeated]
		}
		_ = writeTemplate(&validIfs, template, map[string]string{
			"fieldName": f.name,
		})
	}
	return validIfs.String()
}

func makeSizeIfs(m message) (string, error) {
	var sizeIfs strings.Builder
	for _, f := range m.fields {
		var template string
		if f.repeated {
			switch f.canotoType {
			case canotoInt, canotoSint:
				template = sizeIfRepeatedSimpleTemplate
			case canotoFint, canotoBool:
				template = sizeIfRepeatedFixedSizeTemplate
			case canotoBytes:
				switch f.goType {
				case goString, goBytes:
					template = sizeIfRepeatedBytesTemplate
				default:
					template = sizeIfRepeatedCustomTemplate
				}
			default:
				return "", fmt.Errorf("%w: %q", errUnexpectedCanotoType, f.canotoType)
			}
		} else {
			switch f.canotoType {
			case canotoInt, canotoSint:
				template = sizeIfSimpleTemplate
			case canotoFint:
				template = sizeIfFixedSizeTemplate
			case canotoBool:
				template = sizeIfBoolTemplate
			case canotoBytes:
				switch f.goType {
				case goString, goBytes:
					template = sizeIfBytesTemplate
				default:
					template = sizeIfCustomTemplate
				}
			default:
				return "", fmt.Errorf("%w: %q", errUnexpectedCanotoType, f.canotoType)
			}
		}
		_ = writeTemplate(&sizeIfs, template, f.templateArgs)
	}
	return sizeIfs.String(), nil
}

func makeMarshalIfs(m message) (string, error) {
	var marshalIfs strings.Builder
	for _, f := range m.fields {
		var template string
		if f.repeated {
			switch f.canotoType {
			case canotoInt, canotoSint:
				template = marshalIfRepeatedIntTemplate
			case canotoFint, canotoBool:
				template = marshalIfRepeatedFixedSizeTemplate
			case canotoBytes:
				switch f.goType {
				case goString, goBytes:
					template = marshalIfRepeatedBytesTemplate
				default:
					template = marshalIfRepeatedCustomTemplate
				}
			default:
				return "", fmt.Errorf("%w: %q", errUnexpectedCanotoType, f.canotoType)
			}
		} else {
			switch f.canotoType {
			case canotoInt, canotoSint:
				template = marshalIfIntTemplate
			case canotoFint:
				template = marshalIfFintTemplate
			case canotoBool:
				template = marshalIfBoolTemplate
			case canotoBytes:
				switch f.goType {
				case goString, goBytes:
					template = marshalIfBytesTemplate
				default:
					template = marshalIfCustomTemplate
				}
			default:
				return "", fmt.Errorf("%w: %q", errUnexpectedCanotoType, f.canotoType)
			}
		}
		_ = writeTemplate(&marshalIfs, template, f.templateArgs)
	}
	return marshalIfs.String(), nil
}

func writeTemplate(w io.Writer, template string, args map[string]string) error {
	s := os.Expand(template, func(key string) string {
		return args[key]
	})
	_, err := w.Write([]byte(s))
	return err
}
