// Code generated by Canoto. DO NOT EDIT.

package examples

import (
	"unicode/utf8"

	"github.com/StephenButtolph/canoto"
)

// Ensure that "unicode/utf8" is imported without error
var _ = utf8.ValidString

const (
	canoto__Scalars__Int32__tag = "\x08" // canoto.Tag(1, canoto.Varint)
	canoto__Scalars__Int64__tag = "\x10" // canoto.Tag(2, canoto.Varint)
	canoto__Scalars__Uint32__tag = "\x18" // canoto.Tag(3, canoto.Varint)
	canoto__Scalars__Uint64__tag = "\x20" // canoto.Tag(4, canoto.Varint)
	canoto__Scalars__Sint32__tag = "\x28" // canoto.Tag(5, canoto.Varint)
	canoto__Scalars__Sint64__tag = "\x30" // canoto.Tag(6, canoto.Varint)
	canoto__Scalars__Fixed32__tag = "\x3d" // canoto.Tag(7, canoto.I32)
	canoto__Scalars__Fixed64__tag = "\x41" // canoto.Tag(8, canoto.I64)
	canoto__Scalars__Sfixed32__tag = "\x4d" // canoto.Tag(9, canoto.I32)
	canoto__Scalars__Sfixed64__tag = "\x51" // canoto.Tag(10, canoto.I64)
	canoto__Scalars__Bool__tag = "\x58" // canoto.Tag(11, canoto.Varint)
	canoto__Scalars__String__tag = "\x62" // canoto.Tag(12, canoto.Len)
	canoto__Scalars__Bytes__tag = "\x6a" // canoto.Tag(13, canoto.Len)
	canoto__Scalars__LargestFieldNumber__tag = "\x72" // canoto.Tag(14, canoto.Len)

	canoto__Scalars__Int32__tag__size = len(canoto__Scalars__Int32__tag)
	canoto__Scalars__Int64__tag__size = len(canoto__Scalars__Int64__tag)
	canoto__Scalars__Uint32__tag__size = len(canoto__Scalars__Uint32__tag)
	canoto__Scalars__Uint64__tag__size = len(canoto__Scalars__Uint64__tag)
	canoto__Scalars__Sint32__tag__size = len(canoto__Scalars__Sint32__tag)
	canoto__Scalars__Sint64__tag__size = len(canoto__Scalars__Sint64__tag)
	canoto__Scalars__Fixed32__tag__size = len(canoto__Scalars__Fixed32__tag)
	canoto__Scalars__Fixed64__tag__size = len(canoto__Scalars__Fixed64__tag)
	canoto__Scalars__Sfixed32__tag__size = len(canoto__Scalars__Sfixed32__tag)
	canoto__Scalars__Sfixed64__tag__size = len(canoto__Scalars__Sfixed64__tag)
	canoto__Scalars__Bool__tag__size = len(canoto__Scalars__Bool__tag)
	canoto__Scalars__String__tag__size = len(canoto__Scalars__String__tag)
	canoto__Scalars__Bytes__tag__size = len(canoto__Scalars__Bytes__tag)
	canoto__Scalars__LargestFieldNumber__tag__size = len(canoto__Scalars__LargestFieldNumber__tag)
)

func (c *Scalars) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(&r)
}

func (c *Scalars) UnmarshalCanotoFrom(r *canoto.Reader) error {
	var minField uint32
	for canoto.HasNext(r) {
		field, wireType, err := canoto.ReadTag(r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			c.Int32, err = canoto.ReadInt[int32](r)
			if err != nil {
				return err
			}
			if c.Int32 == 0 {
				return canoto.ErrZeroValue
			}
		case 2:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			c.Int64, err = canoto.ReadInt[int64](r)
			if err != nil {
				return err
			}
			if c.Int64 == 0 {
				return canoto.ErrZeroValue
			}
		case 3:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			c.Uint32, err = canoto.ReadInt[uint32](r)
			if err != nil {
				return err
			}
			if c.Uint32 == 0 {
				return canoto.ErrZeroValue
			}
		case 4:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			c.Uint64, err = canoto.ReadInt[uint64](r)
			if err != nil {
				return err
			}
			if c.Uint64 == 0 {
				return canoto.ErrZeroValue
			}
		case 5:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			c.Sint32, err = canoto.ReadSint[int32](r)
			if err != nil {
				return err
			}
			if c.Sint32 == 0 {
				return canoto.ErrZeroValue
			}
		case 6:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			c.Sint64, err = canoto.ReadSint[int64](r)
			if err != nil {
				return err
			}
			if c.Sint64 == 0 {
				return canoto.ErrZeroValue
			}
		case 7:
			if wireType != canoto.I32 {
				return canoto.ErrInvalidWireType
			}
			c.Fixed32, err = canoto.ReadFint32[uint32](r)
			if err != nil {
				return err
			}
			if c.Fixed32 == 0 {
				return canoto.ErrZeroValue
			}
		case 8:
			if wireType != canoto.I64 {
				return canoto.ErrInvalidWireType
			}
			c.Fixed64, err = canoto.ReadFint64[uint64](r)
			if err != nil {
				return err
			}
			if c.Fixed64 == 0 {
				return canoto.ErrZeroValue
			}
		case 9:
			if wireType != canoto.I32 {
				return canoto.ErrInvalidWireType
			}
			c.Sfixed32, err = canoto.ReadFint32[int32](r)
			if err != nil {
				return err
			}
			if c.Sfixed32 == 0 {
				return canoto.ErrZeroValue
			}
		case 10:
			if wireType != canoto.I64 {
				return canoto.ErrInvalidWireType
			}
			c.Sfixed64, err = canoto.ReadFint64[int64](r)
			if err != nil {
				return err
			}
			if c.Sfixed64 == 0 {
				return canoto.ErrZeroValue
			}
		case 11:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			c.Bool, err = canoto.ReadBool(r)
			if err != nil {
				return err
			}
			if !c.Bool {
				return canoto.ErrZeroValue
			}
		case 12:
			if wireType != canoto.Len {
				return canoto.ErrInvalidWireType
			}
			c.String, err = canoto.ReadString(r)
			if err != nil {
				return err
			}
			if len(c.String) == 0 {
				return canoto.ErrZeroValue
			}
		case 13:
			if wireType != canoto.Len {
				return canoto.ErrInvalidWireType
			}
			c.Bytes, err = canoto.ReadBytes(r)
			if err != nil {
				return err
			}
			if len(c.Bytes) == 0 {
				return canoto.ErrZeroValue
			}
		case 14:
			if wireType != canoto.Len {
				return canoto.ErrInvalidWireType
			}

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			msgBytes, err = canoto.ReadBytes(r)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}

			remainingBytes := r.B
			r.B = msgBytes
			err = c.LargestFieldNumber.UnmarshalCanotoFrom(r)
			r.B = remainingBytes
			if err != nil {
				return err
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

func (c *Scalars) ValidCanoto() bool {
	return utf8.ValidString(c.String) && c.LargestFieldNumber.ValidCanoto()
}

func (c *Scalars) CalculateCanotoSize() int {
	c.canotoSize = 0
	if c.Int32 != 0 {
		c.canotoSize += canoto__Scalars__Int32__tag__size + canoto.SizeInt(c.Int32)
	}
	if c.Int64 != 0 {
		c.canotoSize += canoto__Scalars__Int64__tag__size + canoto.SizeInt(c.Int64)
	}
	if c.Uint32 != 0 {
		c.canotoSize += canoto__Scalars__Uint32__tag__size + canoto.SizeInt(c.Uint32)
	}
	if c.Uint64 != 0 {
		c.canotoSize += canoto__Scalars__Uint64__tag__size + canoto.SizeInt(c.Uint64)
	}
	if c.Sint32 != 0 {
		c.canotoSize += canoto__Scalars__Sint32__tag__size + canoto.SizeSint(c.Sint32)
	}
	if c.Sint64 != 0 {
		c.canotoSize += canoto__Scalars__Sint64__tag__size + canoto.SizeSint(c.Sint64)
	}
	if c.Fixed32 != 0 {
		c.canotoSize += canoto__Scalars__Fixed32__tag__size + canoto.SizeFint32
	}
	if c.Fixed64 != 0 {
		c.canotoSize += canoto__Scalars__Fixed64__tag__size + canoto.SizeFint64
	}
	if c.Sfixed32 != 0 {
		c.canotoSize += canoto__Scalars__Sfixed32__tag__size + canoto.SizeFint32
	}
	if c.Sfixed64 != 0 {
		c.canotoSize += canoto__Scalars__Sfixed64__tag__size + canoto.SizeFint64
	}
	if c.Bool {
		c.canotoSize += canoto__Scalars__Bool__tag__size + canoto.SizeBool
	}
	if len(c.String) != 0 {
		c.canotoSize += canoto__Scalars__String__tag__size + canoto.SizeBytes(c.String)
	}
	if len(c.Bytes) != 0 {
		c.canotoSize += canoto__Scalars__Bytes__tag__size + canoto.SizeBytes(c.Bytes)
	}
	if fieldSize := c.LargestFieldNumber.CalculateCanotoSize(); fieldSize != 0 {
		c.canotoSize += canoto__Scalars__LargestFieldNumber__tag__size + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
	return c.canotoSize
}

func (c *Scalars) CachedCanotoSize() int {
	return c.canotoSize
}

func (c *Scalars) MarshalCanoto() []byte {
	w := canoto.Writer{
		B: make([]byte, 0, c.CalculateCanotoSize()),
	}
	c.MarshalCanotoInto(&w)
	return w.B
}

func (c *Scalars) MarshalCanotoInto(w *canoto.Writer) {
	if c.Int32 != 0 {
		canoto.Append(w, canoto__Scalars__Int32__tag)
		canoto.AppendInt(w, c.Int32)
	}
	if c.Int64 != 0 {
		canoto.Append(w, canoto__Scalars__Int64__tag)
		canoto.AppendInt(w, c.Int64)
	}
	if c.Uint32 != 0 {
		canoto.Append(w, canoto__Scalars__Uint32__tag)
		canoto.AppendInt(w, c.Uint32)
	}
	if c.Uint64 != 0 {
		canoto.Append(w, canoto__Scalars__Uint64__tag)
		canoto.AppendInt(w, c.Uint64)
	}
	if c.Sint32 != 0 {
		canoto.Append(w, canoto__Scalars__Sint32__tag)
		canoto.AppendSint(w, c.Sint32)
	}
	if c.Sint64 != 0 {
		canoto.Append(w, canoto__Scalars__Sint64__tag)
		canoto.AppendSint(w, c.Sint64)
	}
	if c.Fixed32 != 0 {
		canoto.Append(w, canoto__Scalars__Fixed32__tag)
		canoto.AppendFint32(w, c.Fixed32)
	}
	if c.Fixed64 != 0 {
		canoto.Append(w, canoto__Scalars__Fixed64__tag)
		canoto.AppendFint64(w, c.Fixed64)
	}
	if c.Sfixed32 != 0 {
		canoto.Append(w, canoto__Scalars__Sfixed32__tag)
		canoto.AppendFint32(w, c.Sfixed32)
	}
	if c.Sfixed64 != 0 {
		canoto.Append(w, canoto__Scalars__Sfixed64__tag)
		canoto.AppendFint64(w, c.Sfixed64)
	}
	if c.Bool {
		canoto.Append(w, canoto__Scalars__Bool__tag)
		canoto.AppendBool(w, true)
	}
	if len(c.String) != 0 {
		canoto.Append(w, canoto__Scalars__String__tag)
		canoto.AppendBytes(w, c.String)
	}
	if len(c.Bytes) != 0 {
		canoto.Append(w, canoto__Scalars__Bytes__tag)
		canoto.AppendBytes(w, c.Bytes)
	}
	if fieldSize := c.LargestFieldNumber.CachedCanotoSize(); fieldSize != 0 {
		canoto.Append(w, canoto__Scalars__LargestFieldNumber__tag)
		canoto.AppendInt(w, int64(fieldSize))
		c.LargestFieldNumber.MarshalCanotoInto(w)
	}
}
