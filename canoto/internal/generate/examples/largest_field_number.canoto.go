// Code generated by Canoto. DO NOT EDIT.

package examples

import (
	"io"
	"sync/atomic"
	"unicode/utf8"

	"github.com/StephenButtolph/canoto"
)

// Ensure that unused imports do not error
var (
	_ = io.ErrUnexpectedEOF
	_ = utf8.ValidString
)

const (
	canoto__LargestFieldNumber__Int32__tag = "\xf8\xff\xff\xff\x0f" // canoto.Tag(536870911, canoto.Varint)

	canoto__LargestFieldNumber__Int32__tag__size = len(canoto__LargestFieldNumber__Int32__tag)
)

type canotoData_LargestFieldNumber struct {
	size atomic.Int64
}

func (c *LargestFieldNumber) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(&r)
}

func (c *LargestFieldNumber) UnmarshalCanotoFrom(r *canoto.Reader) error {
	var minField uint32
	for canoto.HasNext(r) {
		field, wireType, err := canoto.ReadTag(r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 536870911:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			c.Int32, err = canoto.ReadInt[int32](r)
			if err != nil {
				return err
			}
			if canoto.IsZero(c.Int32) {
				return canoto.ErrZeroValue
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

func (c *LargestFieldNumber) ValidCanoto() bool {
	return true
}

func (c *LargestFieldNumber) CalculateCanotoSize() int {
	var size int
	if !canoto.IsZero(c.Int32) {
		size += canoto__LargestFieldNumber__Int32__tag__size + canoto.SizeInt(c.Int32)
	}
	c.canotoData.size.Store(int64(size))
	return size
}

func (c *LargestFieldNumber) CachedCanotoSize() int {
	return int(c.canotoData.size.Load())
}

func (c *LargestFieldNumber) MarshalCanoto() []byte {
	w := canoto.Writer{
		B: make([]byte, 0, c.CalculateCanotoSize()),
	}
	c.MarshalCanotoInto(&w)
	return w.B
}

func (c *LargestFieldNumber) MarshalCanotoInto(w *canoto.Writer) {
	if !canoto.IsZero(c.Int32) {
		canoto.Append(w, canoto__LargestFieldNumber__Int32__tag)
		canoto.AppendInt(w, c.Int32)
	}
}
