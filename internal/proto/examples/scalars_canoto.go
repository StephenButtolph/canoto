// Code generated by Canoto. DO NOT EDIT.
// Source: internal/proto/examples/scalars.go

package examples

import (
	"unicode/utf8"

	"github.com/StephenButtolph/canoto"
)

const (
	canoto__Scalars__Int32__tag            = "\x08" // canoto.Tag(1, canoto.Varint)
	canoto__Scalars__Int64__tag            = "\x10" // canoto.Tag(2, canoto.Varint)
	canoto__Scalars__Uint32__tag           = "\x18" // canoto.Tag(3, canoto.Varint)
	canoto__Scalars__Uint64__tag           = "\x20" // canoto.Tag(4, canoto.Varint)
	canoto__Scalars__Sint32__tag           = "\x28" // canoto.Tag(5, canoto.Varint)
	canoto__Scalars__Sint64__tag           = "\x30" // canoto.Tag(6, canoto.Varint)
	canoto__Scalars__Fixed32__tag          = "\x3d" // canoto.Tag(7, canoto.I32)
	canoto__Scalars__Fixed64__tag          = "\x41" // canoto.Tag(8, canoto.I64)
	canoto__Scalars__Sfixed32__tag         = "\x4d" // canoto.Tag(9, canoto.I32)
	canoto__Scalars__Sfixed64__tag         = "\x51" // canoto.Tag(10, canoto.I64)
	canoto__Scalars__Bool__tag             = "\x58" // canoto.Tag(11, canoto.Varint)
	canoto__Scalars__String__tag           = "\x62" // canoto.Tag(12, canoto.Len)
	canoto__Scalars__Bytes__tag            = "\x6a" // canoto.Tag(13, canoto.Len)
	canoto__Scalars__LargestFieldSize__tag = "\x72" // canoto.Tag(14, canoto.Len)

	canoto__Scalars__Int32__tag__size            = len(canoto__Scalars__Int32__tag)
	canoto__Scalars__Int64__tag__size            = len(canoto__Scalars__Int64__tag)
	canoto__Scalars__Uint32__tag__size           = len(canoto__Scalars__Uint32__tag)
	canoto__Scalars__Uint64__tag__size           = len(canoto__Scalars__Uint64__tag)
	canoto__Scalars__Sint32__tag__size           = len(canoto__Scalars__Sint32__tag)
	canoto__Scalars__Sint64__tag__size           = len(canoto__Scalars__Sint64__tag)
	canoto__Scalars__Fixed32__tag__size          = len(canoto__Scalars__Fixed32__tag)
	canoto__Scalars__Fixed64__tag__size          = len(canoto__Scalars__Fixed64__tag)
	canoto__Scalars__Sfixed32__tag__size         = len(canoto__Scalars__Sfixed32__tag)
	canoto__Scalars__Sfixed64__tag__size         = len(canoto__Scalars__Sfixed64__tag)
	canoto__Scalars__Bool__tag__size             = len(canoto__Scalars__Bool__tag)
	canoto__Scalars__String__tag__size           = len(canoto__Scalars__String__tag)
	canoto__Scalars__Bytes__tag__size            = len(canoto__Scalars__Bytes__tag)
	canoto__Scalars__LargestFieldSize__tag__size = len(canoto__Scalars__LargestFieldSize__tag)
)

type canotoData_Scalars struct {
	largestFieldNumberSize int
}

func (s *Scalars) UnmarshalCanoto(r *canoto.Reader) error {
	var minField uint32
	for canoto.HasNext(r) {
		field, wireType, err := canoto.ReadTag(r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			s.Int32, err = canoto.ReadInt[int32](r)
		case 2:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			s.Int64, err = canoto.ReadInt[int64](r)
		case 3:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			s.Uint32, err = canoto.ReadInt[uint32](r)
		case 4:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			s.Uint64, err = canoto.ReadInt[uint64](r)
		case 5:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			s.Sint32, err = canoto.ReadSint[int32](r)
		case 6:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			s.Sint64, err = canoto.ReadSint[int64](r)
		case 7:
			if wireType != canoto.I32 {
				return canoto.ErrInvalidWireType
			}
			s.Fixed32, err = canoto.ReadFint32[uint32](r)
		case 8:
			if wireType != canoto.I64 {
				return canoto.ErrInvalidWireType
			}
			s.Fixed64, err = canoto.ReadFint64[uint64](r)
		case 9:
			if wireType != canoto.I32 {
				return canoto.ErrInvalidWireType
			}
			s.Sfixed32, err = canoto.ReadFint32[int32](r)
		case 10:
			if wireType != canoto.I64 {
				return canoto.ErrInvalidWireType
			}
			s.Sfixed64, err = canoto.ReadFint64[int64](r)
		case 11:
			if wireType != canoto.Varint {
				return canoto.ErrInvalidWireType
			}
			s.Bool = true
			err = canoto.ReadTrue(r)
		case 12:
			if wireType != canoto.Len {
				return canoto.ErrInvalidWireType
			}
			s.String, err = canoto.ReadString(r)
		case 13:
			if wireType != canoto.Len {
				return canoto.ErrInvalidWireType
			}
			s.Bytes, err = canoto.ReadBytes(r)
		case 14:
			if wireType != canoto.Len {
				return canoto.ErrInvalidWireType
			}

			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			msgBytes, err = canoto.ReadBytes(r)
			r.Unsafe = originalUnsafe
			if err != nil {
				return err
			}

			remainingBytes := r.B
			r.B = msgBytes
			err = s.LargestFieldNumber.UnmarshalCanoto(r)
			r.B = remainingBytes
		default:
			return canoto.ErrUnknownField
		}
		if err != nil {
			return err
		}

		minField = field + 1
	}
	return nil
}

func (s *Scalars) ValidCanoto() bool {
	return utf8.ValidString(s.String) && s.LargestFieldNumber.ValidCanoto()
}

func (s *Scalars) SizeCanoto() int {
	var size int
	if s.Int32 != 0 {
		size += canoto__Scalars__Int32__tag__size + canoto.SizeInt(s.Int32)
	}
	if s.Int64 != 0 {
		size += canoto__Scalars__Int64__tag__size + canoto.SizeInt(s.Int64)
	}
	if s.Uint32 != 0 {
		size += canoto__Scalars__Uint32__tag__size + canoto.SizeInt(s.Uint32)
	}
	if s.Uint64 != 0 {
		size += canoto__Scalars__Uint64__tag__size + canoto.SizeInt(s.Uint64)
	}
	if s.Sint32 != 0 {
		size += canoto__Scalars__Sint32__tag__size + canoto.SizeSint(s.Sint32)
	}
	if s.Sint64 != 0 {
		size += canoto__Scalars__Sint64__tag__size + canoto.SizeSint(s.Sint64)
	}
	if s.Fixed32 != 0 {
		size += canoto__Scalars__Fixed32__tag__size + canoto.SizeFint32
	}
	if s.Fixed64 != 0 {
		size += canoto__Scalars__Fixed64__tag__size + canoto.SizeFint64
	}
	if s.Sfixed32 != 0 {
		size += canoto__Scalars__Sfixed32__tag__size + canoto.SizeFint32
	}
	if s.Sfixed64 != 0 {
		size += canoto__Scalars__Sfixed64__tag__size + canoto.SizeFint64
	}
	if s.Bool {
		size += canoto__Scalars__Bool__tag__size + canoto.SizeBool
	}
	if len(s.String) != 0 {
		size += canoto__Scalars__String__tag__size + canoto.SizeBytes(s.String)
	}
	if len(s.Bytes) != 0 {
		size += canoto__Scalars__Bytes__tag__size + canoto.SizeBytes(s.Bytes)
	}
	s.canotoData.largestFieldNumberSize = s.LargestFieldNumber.SizeCanoto()
	if s.canotoData.largestFieldNumberSize != 0 {
		size += canoto__Scalars__LargestFieldSize__tag__size + canoto.SizeInt(int32(s.canotoData.largestFieldNumberSize)) + s.canotoData.largestFieldNumberSize
	}
	return size
}

func (s *Scalars) MarshalCanoto(w *canoto.Writer) {
	if s.Int32 != 0 {
		canoto.Append(w, canoto__Scalars__Int32__tag)
		canoto.AppendInt(w, s.Int32)
	}
	if s.Int64 != 0 {
		canoto.Append(w, canoto__Scalars__Int64__tag)
		canoto.AppendInt(w, s.Int64)
	}
	if s.Uint32 != 0 {
		canoto.Append(w, canoto__Scalars__Uint32__tag)
		canoto.AppendInt(w, s.Uint32)
	}
	if s.Uint64 != 0 {
		canoto.Append(w, canoto__Scalars__Uint64__tag)
		canoto.AppendInt(w, s.Uint64)
	}
	if s.Sint32 != 0 {
		canoto.Append(w, canoto__Scalars__Sint32__tag)
		canoto.AppendSint(w, s.Sint32)
	}
	if s.Sint64 != 0 {
		canoto.Append(w, canoto__Scalars__Sint64__tag)
		canoto.AppendSint(w, s.Sint64)
	}
	if s.Fixed32 != 0 {
		canoto.Append(w, canoto__Scalars__Fixed32__tag)
		canoto.AppendFint32(w, s.Fixed32)
	}
	if s.Fixed64 != 0 {
		canoto.Append(w, canoto__Scalars__Fixed64__tag)
		canoto.AppendFint64(w, s.Fixed64)
	}
	if s.Sfixed32 != 0 {
		canoto.Append(w, canoto__Scalars__Sfixed32__tag)
		canoto.AppendFint32(w, s.Sfixed32)
	}
	if s.Sfixed64 != 0 {
		canoto.Append(w, canoto__Scalars__Sfixed64__tag)
		canoto.AppendFint64(w, s.Sfixed64)
	}
	if s.Bool {
		canoto.Append(w, canoto__Scalars__Bool__tag)
		canoto.AppendTrue(w)
	}
	if len(s.String) != 0 {
		canoto.Append(w, canoto__Scalars__String__tag)
		canoto.AppendBytes(w, s.String)
	}
	if len(s.Bytes) != 0 {
		canoto.Append(w, canoto__Scalars__Bytes__tag)
		canoto.AppendBytes(w, s.Bytes)
	}
	if s.canotoData.largestFieldNumberSize != 0 {
		canoto.Append(w, canoto__Scalars__LargestFieldSize__tag)
		canoto.AppendInt(w, int32(s.canotoData.largestFieldNumberSize))
		s.LargestFieldNumber.MarshalCanoto(w)
	}
}
