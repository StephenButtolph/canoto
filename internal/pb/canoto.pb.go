// Code generated by canoto. DO NOT EDIT.
// versions:
// 	canoto v0.3.0-dev
// source: canoto.go

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        (unknown)
// source: canoto.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LargestFieldNumber struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int32 uint64 `protobuf:"varint,536870911,opt,name=Int32,proto3" json:"Int32,omitempty"`
}

func (x *LargestFieldNumber) Reset() {
	*x = LargestFieldNumber{}
	if protoimpl.UnsafeEnabled {
		mi := &file_canoto_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LargestFieldNumber) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LargestFieldNumber) ProtoMessage() {}

func (x *LargestFieldNumber) ProtoReflect() protoreflect.Message {
	mi := &file_canoto_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LargestFieldNumber.ProtoReflect.Descriptor instead.
func (*LargestFieldNumber) Descriptor() ([]byte, []int) {
	return file_canoto_proto_rawDescGZIP(), []int{0}
}

func (x *LargestFieldNumber) GetInt32() uint64 {
	if x != nil {
		return x.Int32
	}
	return 0
}

type OneOf struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to A:
	//
	//	*OneOf_A1
	//	*OneOf_A2
	A isOneOf_A `protobuf_oneof:"a"`
	// Types that are assignable to B:
	//
	//	*OneOf_B1
	//	*OneOf_B2
	B isOneOf_B `protobuf_oneof:"b"`
	C int32     `protobuf:"varint,5,opt,name=C,proto3" json:"C,omitempty"`
	D int64     `protobuf:"varint,6,opt,name=D,proto3" json:"D,omitempty"`
}

func (x *OneOf) Reset() {
	*x = OneOf{}
	if protoimpl.UnsafeEnabled {
		mi := &file_canoto_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OneOf) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OneOf) ProtoMessage() {}

func (x *OneOf) ProtoReflect() protoreflect.Message {
	mi := &file_canoto_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OneOf.ProtoReflect.Descriptor instead.
func (*OneOf) Descriptor() ([]byte, []int) {
	return file_canoto_proto_rawDescGZIP(), []int{1}
}

func (m *OneOf) GetA() isOneOf_A {
	if m != nil {
		return m.A
	}
	return nil
}

func (x *OneOf) GetA1() int32 {
	if x, ok := x.GetA().(*OneOf_A1); ok {
		return x.A1
	}
	return 0
}

func (x *OneOf) GetA2() int64 {
	if x, ok := x.GetA().(*OneOf_A2); ok {
		return x.A2
	}
	return 0
}

func (m *OneOf) GetB() isOneOf_B {
	if m != nil {
		return m.B
	}
	return nil
}

func (x *OneOf) GetB1() int32 {
	if x, ok := x.GetB().(*OneOf_B1); ok {
		return x.B1
	}
	return 0
}

func (x *OneOf) GetB2() int64 {
	if x, ok := x.GetB().(*OneOf_B2); ok {
		return x.B2
	}
	return 0
}

func (x *OneOf) GetC() int32 {
	if x != nil {
		return x.C
	}
	return 0
}

func (x *OneOf) GetD() int64 {
	if x != nil {
		return x.D
	}
	return 0
}

type isOneOf_A interface {
	isOneOf_A()
}

type OneOf_A1 struct {
	A1 int32 `protobuf:"varint,1,opt,name=A1,proto3,oneof"`
}

type OneOf_A2 struct {
	A2 int64 `protobuf:"varint,7,opt,name=A2,proto3,oneof"`
}

func (*OneOf_A1) isOneOf_A() {}

func (*OneOf_A2) isOneOf_A() {}

type isOneOf_B interface {
	isOneOf_B()
}

type OneOf_B1 struct {
	B1 int32 `protobuf:"varint,3,opt,name=B1,proto3,oneof"`
}

type OneOf_B2 struct {
	B2 int64 `protobuf:"varint,4,opt,name=B2,proto3,oneof"`
}

func (*OneOf_B1) isOneOf_B() {}

func (*OneOf_B2) isOneOf_B() {}

type Scalars struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Int8                            int32                 `protobuf:"varint,1,opt,name=Int8,proto3" json:"Int8,omitempty"`
	Int16                           int32                 `protobuf:"varint,2,opt,name=Int16,proto3" json:"Int16,omitempty"`
	Int32                           int32                 `protobuf:"varint,3,opt,name=Int32,proto3" json:"Int32,omitempty"`
	Int64                           int64                 `protobuf:"varint,4,opt,name=Int64,proto3" json:"Int64,omitempty"`
	Uint8                           uint32                `protobuf:"varint,5,opt,name=Uint8,proto3" json:"Uint8,omitempty"`
	Uint16                          uint32                `protobuf:"varint,6,opt,name=Uint16,proto3" json:"Uint16,omitempty"`
	Uint32                          uint32                `protobuf:"varint,7,opt,name=Uint32,proto3" json:"Uint32,omitempty"`
	Uint64                          uint64                `protobuf:"varint,8,opt,name=Uint64,proto3" json:"Uint64,omitempty"`
	Sint8                           int32                 `protobuf:"zigzag32,9,opt,name=Sint8,proto3" json:"Sint8,omitempty"`
	Sint16                          int32                 `protobuf:"zigzag32,10,opt,name=Sint16,proto3" json:"Sint16,omitempty"`
	Sint32                          int32                 `protobuf:"zigzag32,11,opt,name=Sint32,proto3" json:"Sint32,omitempty"`
	Sint64                          int64                 `protobuf:"zigzag64,12,opt,name=Sint64,proto3" json:"Sint64,omitempty"`
	Fixed32                         uint32                `protobuf:"fixed32,13,opt,name=Fixed32,proto3" json:"Fixed32,omitempty"`
	Fixed64                         uint64                `protobuf:"fixed64,14,opt,name=Fixed64,proto3" json:"Fixed64,omitempty"`
	Sfixed32                        int32                 `protobuf:"fixed32,15,opt,name=Sfixed32,proto3" json:"Sfixed32,omitempty"`
	Sfixed64                        int64                 `protobuf:"fixed64,16,opt,name=Sfixed64,proto3" json:"Sfixed64,omitempty"`
	Bool                            bool                  `protobuf:"varint,17,opt,name=Bool,proto3" json:"Bool,omitempty"`
	String_                         string                `protobuf:"bytes,18,opt,name=String,proto3" json:"String,omitempty"`
	Bytes                           []byte                `protobuf:"bytes,19,opt,name=Bytes,proto3" json:"Bytes,omitempty"`
	LargestFieldNumber              *LargestFieldNumber   `protobuf:"bytes,20,opt,name=LargestFieldNumber,proto3" json:"LargestFieldNumber,omitempty"`
	RepeatedInt8                    []int32               `protobuf:"varint,21,rep,packed,name=RepeatedInt8,proto3" json:"RepeatedInt8,omitempty"`
	RepeatedInt16                   []int32               `protobuf:"varint,22,rep,packed,name=RepeatedInt16,proto3" json:"RepeatedInt16,omitempty"`
	RepeatedInt32                   []int32               `protobuf:"varint,23,rep,packed,name=RepeatedInt32,proto3" json:"RepeatedInt32,omitempty"`
	RepeatedInt64                   []int64               `protobuf:"varint,24,rep,packed,name=RepeatedInt64,proto3" json:"RepeatedInt64,omitempty"`
	RepeatedUint8                   []uint32              `protobuf:"varint,25,rep,packed,name=RepeatedUint8,proto3" json:"RepeatedUint8,omitempty"`
	RepeatedUint16                  []uint32              `protobuf:"varint,26,rep,packed,name=RepeatedUint16,proto3" json:"RepeatedUint16,omitempty"`
	RepeatedUint32                  []uint32              `protobuf:"varint,27,rep,packed,name=RepeatedUint32,proto3" json:"RepeatedUint32,omitempty"`
	RepeatedUint64                  []uint64              `protobuf:"varint,28,rep,packed,name=RepeatedUint64,proto3" json:"RepeatedUint64,omitempty"`
	RepeatedSint8                   []int32               `protobuf:"zigzag32,29,rep,packed,name=RepeatedSint8,proto3" json:"RepeatedSint8,omitempty"`
	RepeatedSint16                  []int32               `protobuf:"zigzag32,30,rep,packed,name=RepeatedSint16,proto3" json:"RepeatedSint16,omitempty"`
	RepeatedSint32                  []int32               `protobuf:"zigzag32,31,rep,packed,name=RepeatedSint32,proto3" json:"RepeatedSint32,omitempty"`
	RepeatedSint64                  []int64               `protobuf:"zigzag64,32,rep,packed,name=RepeatedSint64,proto3" json:"RepeatedSint64,omitempty"`
	RepeatedFixed32                 []uint32              `protobuf:"fixed32,33,rep,packed,name=RepeatedFixed32,proto3" json:"RepeatedFixed32,omitempty"`
	RepeatedFixed64                 []uint64              `protobuf:"fixed64,34,rep,packed,name=RepeatedFixed64,proto3" json:"RepeatedFixed64,omitempty"`
	RepeatedSfixed32                []int32               `protobuf:"fixed32,35,rep,packed,name=RepeatedSfixed32,proto3" json:"RepeatedSfixed32,omitempty"`
	RepeatedSfixed64                []int64               `protobuf:"fixed64,36,rep,packed,name=RepeatedSfixed64,proto3" json:"RepeatedSfixed64,omitempty"`
	RepeatedBool                    []bool                `protobuf:"varint,37,rep,packed,name=RepeatedBool,proto3" json:"RepeatedBool,omitempty"`
	RepeatedString                  []string              `protobuf:"bytes,38,rep,name=RepeatedString,proto3" json:"RepeatedString,omitempty"`
	RepeatedBytes                   [][]byte              `protobuf:"bytes,39,rep,name=RepeatedBytes,proto3" json:"RepeatedBytes,omitempty"`
	RepeatedLargestFieldNumber      []*LargestFieldNumber `protobuf:"bytes,40,rep,name=RepeatedLargestFieldNumber,proto3" json:"RepeatedLargestFieldNumber,omitempty"`
	FixedRepeatedInt8               []int32               `protobuf:"varint,41,rep,packed,name=FixedRepeatedInt8,proto3" json:"FixedRepeatedInt8,omitempty"`
	FixedRepeatedInt16              []int32               `protobuf:"varint,42,rep,packed,name=FixedRepeatedInt16,proto3" json:"FixedRepeatedInt16,omitempty"`
	FixedRepeatedInt32              []int32               `protobuf:"varint,43,rep,packed,name=FixedRepeatedInt32,proto3" json:"FixedRepeatedInt32,omitempty"`
	FixedRepeatedInt64              []int64               `protobuf:"varint,44,rep,packed,name=FixedRepeatedInt64,proto3" json:"FixedRepeatedInt64,omitempty"`
	FixedRepeatedUint8              []uint32              `protobuf:"varint,45,rep,packed,name=FixedRepeatedUint8,proto3" json:"FixedRepeatedUint8,omitempty"`
	FixedRepeatedUint16             []uint32              `protobuf:"varint,46,rep,packed,name=FixedRepeatedUint16,proto3" json:"FixedRepeatedUint16,omitempty"`
	FixedRepeatedUint32             []uint32              `protobuf:"varint,47,rep,packed,name=FixedRepeatedUint32,proto3" json:"FixedRepeatedUint32,omitempty"`
	FixedRepeatedUint64             []uint64              `protobuf:"varint,48,rep,packed,name=FixedRepeatedUint64,proto3" json:"FixedRepeatedUint64,omitempty"`
	FixedRepeatedSint8              []int32               `protobuf:"zigzag32,49,rep,packed,name=FixedRepeatedSint8,proto3" json:"FixedRepeatedSint8,omitempty"`
	FixedRepeatedSint16             []int32               `protobuf:"zigzag32,50,rep,packed,name=FixedRepeatedSint16,proto3" json:"FixedRepeatedSint16,omitempty"`
	FixedRepeatedSint32             []int32               `protobuf:"zigzag32,51,rep,packed,name=FixedRepeatedSint32,proto3" json:"FixedRepeatedSint32,omitempty"`
	FixedRepeatedSint64             []int64               `protobuf:"zigzag64,52,rep,packed,name=FixedRepeatedSint64,proto3" json:"FixedRepeatedSint64,omitempty"`
	FixedRepeatedFixed32            []uint32              `protobuf:"fixed32,53,rep,packed,name=FixedRepeatedFixed32,proto3" json:"FixedRepeatedFixed32,omitempty"`
	FixedRepeatedFixed64            []uint64              `protobuf:"fixed64,54,rep,packed,name=FixedRepeatedFixed64,proto3" json:"FixedRepeatedFixed64,omitempty"`
	FixedRepeatedSfixed32           []int32               `protobuf:"fixed32,55,rep,packed,name=FixedRepeatedSfixed32,proto3" json:"FixedRepeatedSfixed32,omitempty"`
	FixedRepeatedSfixed64           []int64               `protobuf:"fixed64,56,rep,packed,name=FixedRepeatedSfixed64,proto3" json:"FixedRepeatedSfixed64,omitempty"`
	FixedRepeatedBool               []bool                `protobuf:"varint,57,rep,packed,name=FixedRepeatedBool,proto3" json:"FixedRepeatedBool,omitempty"`
	FixedRepeatedString             []string              `protobuf:"bytes,58,rep,name=FixedRepeatedString,proto3" json:"FixedRepeatedString,omitempty"`
	FixedBytes                      []byte                `protobuf:"bytes,59,opt,name=FixedBytes,proto3" json:"FixedBytes,omitempty"`
	RepeatedFixedBytes              [][]byte              `protobuf:"bytes,60,rep,name=RepeatedFixedBytes,proto3" json:"RepeatedFixedBytes,omitempty"`
	FixedRepeatedBytes              [][]byte              `protobuf:"bytes,61,rep,name=FixedRepeatedBytes,proto3" json:"FixedRepeatedBytes,omitempty"`
	FixedRepeatedFixedBytes         [][]byte              `protobuf:"bytes,62,rep,name=FixedRepeatedFixedBytes,proto3" json:"FixedRepeatedFixedBytes,omitempty"`
	FixedRepeatedLargestFieldNumber []*LargestFieldNumber `protobuf:"bytes,63,rep,name=FixedRepeatedLargestFieldNumber,proto3" json:"FixedRepeatedLargestFieldNumber,omitempty"`
	ConstRepeatedUint64             []uint64              `protobuf:"varint,64,rep,packed,name=ConstRepeatedUint64,proto3" json:"ConstRepeatedUint64,omitempty"`
	CustomType                      []byte                `protobuf:"bytes,65,opt,name=CustomType,proto3" json:"CustomType,omitempty"`
	CustomUint32                    uint32                `protobuf:"fixed32,66,opt,name=CustomUint32,proto3" json:"CustomUint32,omitempty"`
	CustomString                    string                `protobuf:"bytes,67,opt,name=CustomString,proto3" json:"CustomString,omitempty"`
	CustomBytes                     []byte                `protobuf:"bytes,68,opt,name=CustomBytes,proto3" json:"CustomBytes,omitempty"`
	CustomFixedBytes                []byte                `protobuf:"bytes,69,opt,name=CustomFixedBytes,proto3" json:"CustomFixedBytes,omitempty"`
	CustomRepeatedBytes             [][]byte              `protobuf:"bytes,70,rep,name=CustomRepeatedBytes,proto3" json:"CustomRepeatedBytes,omitempty"`
	CustomRepeatedFixedBytes        [][]byte              `protobuf:"bytes,71,rep,name=CustomRepeatedFixedBytes,proto3" json:"CustomRepeatedFixedBytes,omitempty"`
	CustomFixedRepeatedBytes        [][]byte              `protobuf:"bytes,72,rep,name=CustomFixedRepeatedBytes,proto3" json:"CustomFixedRepeatedBytes,omitempty"`
	CustomFixedRepeatedFixedBytes   [][]byte              `protobuf:"bytes,73,rep,name=CustomFixedRepeatedFixedBytes,proto3" json:"CustomFixedRepeatedFixedBytes,omitempty"`
	OneOf                           *OneOf                `protobuf:"bytes,74,opt,name=OneOf,proto3" json:"OneOf,omitempty"`
}

func (x *Scalars) Reset() {
	*x = Scalars{}
	if protoimpl.UnsafeEnabled {
		mi := &file_canoto_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scalars) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scalars) ProtoMessage() {}

func (x *Scalars) ProtoReflect() protoreflect.Message {
	mi := &file_canoto_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scalars.ProtoReflect.Descriptor instead.
func (*Scalars) Descriptor() ([]byte, []int) {
	return file_canoto_proto_rawDescGZIP(), []int{2}
}

func (x *Scalars) GetInt8() int32 {
	if x != nil {
		return x.Int8
	}
	return 0
}

func (x *Scalars) GetInt16() int32 {
	if x != nil {
		return x.Int16
	}
	return 0
}

func (x *Scalars) GetInt32() int32 {
	if x != nil {
		return x.Int32
	}
	return 0
}

func (x *Scalars) GetInt64() int64 {
	if x != nil {
		return x.Int64
	}
	return 0
}

func (x *Scalars) GetUint8() uint32 {
	if x != nil {
		return x.Uint8
	}
	return 0
}

func (x *Scalars) GetUint16() uint32 {
	if x != nil {
		return x.Uint16
	}
	return 0
}

func (x *Scalars) GetUint32() uint32 {
	if x != nil {
		return x.Uint32
	}
	return 0
}

func (x *Scalars) GetUint64() uint64 {
	if x != nil {
		return x.Uint64
	}
	return 0
}

func (x *Scalars) GetSint8() int32 {
	if x != nil {
		return x.Sint8
	}
	return 0
}

func (x *Scalars) GetSint16() int32 {
	if x != nil {
		return x.Sint16
	}
	return 0
}

func (x *Scalars) GetSint32() int32 {
	if x != nil {
		return x.Sint32
	}
	return 0
}

func (x *Scalars) GetSint64() int64 {
	if x != nil {
		return x.Sint64
	}
	return 0
}

func (x *Scalars) GetFixed32() uint32 {
	if x != nil {
		return x.Fixed32
	}
	return 0
}

func (x *Scalars) GetFixed64() uint64 {
	if x != nil {
		return x.Fixed64
	}
	return 0
}

func (x *Scalars) GetSfixed32() int32 {
	if x != nil {
		return x.Sfixed32
	}
	return 0
}

func (x *Scalars) GetSfixed64() int64 {
	if x != nil {
		return x.Sfixed64
	}
	return 0
}

func (x *Scalars) GetBool() bool {
	if x != nil {
		return x.Bool
	}
	return false
}

func (x *Scalars) GetString_() string {
	if x != nil {
		return x.String_
	}
	return ""
}

func (x *Scalars) GetBytes() []byte {
	if x != nil {
		return x.Bytes
	}
	return nil
}

func (x *Scalars) GetLargestFieldNumber() *LargestFieldNumber {
	if x != nil {
		return x.LargestFieldNumber
	}
	return nil
}

func (x *Scalars) GetRepeatedInt8() []int32 {
	if x != nil {
		return x.RepeatedInt8
	}
	return nil
}

func (x *Scalars) GetRepeatedInt16() []int32 {
	if x != nil {
		return x.RepeatedInt16
	}
	return nil
}

func (x *Scalars) GetRepeatedInt32() []int32 {
	if x != nil {
		return x.RepeatedInt32
	}
	return nil
}

func (x *Scalars) GetRepeatedInt64() []int64 {
	if x != nil {
		return x.RepeatedInt64
	}
	return nil
}

func (x *Scalars) GetRepeatedUint8() []uint32 {
	if x != nil {
		return x.RepeatedUint8
	}
	return nil
}

func (x *Scalars) GetRepeatedUint16() []uint32 {
	if x != nil {
		return x.RepeatedUint16
	}
	return nil
}

func (x *Scalars) GetRepeatedUint32() []uint32 {
	if x != nil {
		return x.RepeatedUint32
	}
	return nil
}

func (x *Scalars) GetRepeatedUint64() []uint64 {
	if x != nil {
		return x.RepeatedUint64
	}
	return nil
}

func (x *Scalars) GetRepeatedSint8() []int32 {
	if x != nil {
		return x.RepeatedSint8
	}
	return nil
}

func (x *Scalars) GetRepeatedSint16() []int32 {
	if x != nil {
		return x.RepeatedSint16
	}
	return nil
}

func (x *Scalars) GetRepeatedSint32() []int32 {
	if x != nil {
		return x.RepeatedSint32
	}
	return nil
}

func (x *Scalars) GetRepeatedSint64() []int64 {
	if x != nil {
		return x.RepeatedSint64
	}
	return nil
}

func (x *Scalars) GetRepeatedFixed32() []uint32 {
	if x != nil {
		return x.RepeatedFixed32
	}
	return nil
}

func (x *Scalars) GetRepeatedFixed64() []uint64 {
	if x != nil {
		return x.RepeatedFixed64
	}
	return nil
}

func (x *Scalars) GetRepeatedSfixed32() []int32 {
	if x != nil {
		return x.RepeatedSfixed32
	}
	return nil
}

func (x *Scalars) GetRepeatedSfixed64() []int64 {
	if x != nil {
		return x.RepeatedSfixed64
	}
	return nil
}

func (x *Scalars) GetRepeatedBool() []bool {
	if x != nil {
		return x.RepeatedBool
	}
	return nil
}

func (x *Scalars) GetRepeatedString() []string {
	if x != nil {
		return x.RepeatedString
	}
	return nil
}

func (x *Scalars) GetRepeatedBytes() [][]byte {
	if x != nil {
		return x.RepeatedBytes
	}
	return nil
}

func (x *Scalars) GetRepeatedLargestFieldNumber() []*LargestFieldNumber {
	if x != nil {
		return x.RepeatedLargestFieldNumber
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedInt8() []int32 {
	if x != nil {
		return x.FixedRepeatedInt8
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedInt16() []int32 {
	if x != nil {
		return x.FixedRepeatedInt16
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedInt32() []int32 {
	if x != nil {
		return x.FixedRepeatedInt32
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedInt64() []int64 {
	if x != nil {
		return x.FixedRepeatedInt64
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedUint8() []uint32 {
	if x != nil {
		return x.FixedRepeatedUint8
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedUint16() []uint32 {
	if x != nil {
		return x.FixedRepeatedUint16
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedUint32() []uint32 {
	if x != nil {
		return x.FixedRepeatedUint32
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedUint64() []uint64 {
	if x != nil {
		return x.FixedRepeatedUint64
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedSint8() []int32 {
	if x != nil {
		return x.FixedRepeatedSint8
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedSint16() []int32 {
	if x != nil {
		return x.FixedRepeatedSint16
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedSint32() []int32 {
	if x != nil {
		return x.FixedRepeatedSint32
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedSint64() []int64 {
	if x != nil {
		return x.FixedRepeatedSint64
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedFixed32() []uint32 {
	if x != nil {
		return x.FixedRepeatedFixed32
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedFixed64() []uint64 {
	if x != nil {
		return x.FixedRepeatedFixed64
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedSfixed32() []int32 {
	if x != nil {
		return x.FixedRepeatedSfixed32
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedSfixed64() []int64 {
	if x != nil {
		return x.FixedRepeatedSfixed64
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedBool() []bool {
	if x != nil {
		return x.FixedRepeatedBool
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedString() []string {
	if x != nil {
		return x.FixedRepeatedString
	}
	return nil
}

func (x *Scalars) GetFixedBytes() []byte {
	if x != nil {
		return x.FixedBytes
	}
	return nil
}

func (x *Scalars) GetRepeatedFixedBytes() [][]byte {
	if x != nil {
		return x.RepeatedFixedBytes
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedBytes() [][]byte {
	if x != nil {
		return x.FixedRepeatedBytes
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedFixedBytes() [][]byte {
	if x != nil {
		return x.FixedRepeatedFixedBytes
	}
	return nil
}

func (x *Scalars) GetFixedRepeatedLargestFieldNumber() []*LargestFieldNumber {
	if x != nil {
		return x.FixedRepeatedLargestFieldNumber
	}
	return nil
}

func (x *Scalars) GetConstRepeatedUint64() []uint64 {
	if x != nil {
		return x.ConstRepeatedUint64
	}
	return nil
}

func (x *Scalars) GetCustomType() []byte {
	if x != nil {
		return x.CustomType
	}
	return nil
}

func (x *Scalars) GetCustomUint32() uint32 {
	if x != nil {
		return x.CustomUint32
	}
	return 0
}

func (x *Scalars) GetCustomString() string {
	if x != nil {
		return x.CustomString
	}
	return ""
}

func (x *Scalars) GetCustomBytes() []byte {
	if x != nil {
		return x.CustomBytes
	}
	return nil
}

func (x *Scalars) GetCustomFixedBytes() []byte {
	if x != nil {
		return x.CustomFixedBytes
	}
	return nil
}

func (x *Scalars) GetCustomRepeatedBytes() [][]byte {
	if x != nil {
		return x.CustomRepeatedBytes
	}
	return nil
}

func (x *Scalars) GetCustomRepeatedFixedBytes() [][]byte {
	if x != nil {
		return x.CustomRepeatedFixedBytes
	}
	return nil
}

func (x *Scalars) GetCustomFixedRepeatedBytes() [][]byte {
	if x != nil {
		return x.CustomFixedRepeatedBytes
	}
	return nil
}

func (x *Scalars) GetCustomFixedRepeatedFixedBytes() [][]byte {
	if x != nil {
		return x.CustomFixedRepeatedFixedBytes
	}
	return nil
}

func (x *Scalars) GetOneOf() *OneOf {
	if x != nil {
		return x.OneOf
	}
	return nil
}

var File_canoto_proto protoreflect.FileDescriptor

var file_canoto_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x63, 0x61, 0x6e, 0x6f, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x2e, 0x0a, 0x12, 0x4c, 0x61, 0x72, 0x67,
	0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18, 0xff, 0xff, 0xff, 0xff, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x22, 0x75, 0x0a, 0x05, 0x4f, 0x6e, 0x65, 0x4f,
	0x66, 0x12, 0x10, 0x0a, 0x02, 0x41, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x02, 0x41, 0x31, 0x12, 0x10, 0x0a, 0x02, 0x41, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x48,
	0x00, 0x52, 0x02, 0x41, 0x32, 0x12, 0x10, 0x0a, 0x02, 0x42, 0x31, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x01, 0x52, 0x02, 0x42, 0x31, 0x12, 0x10, 0x0a, 0x02, 0x42, 0x32, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x03, 0x48, 0x01, 0x52, 0x02, 0x42, 0x32, 0x12, 0x0c, 0x0a, 0x01, 0x43, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x01, 0x43, 0x12, 0x0c, 0x0a, 0x01, 0x44, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x01, 0x44, 0x42, 0x03, 0x0a, 0x01, 0x61, 0x42, 0x03, 0x0a, 0x01, 0x62, 0x22,
	0x84, 0x18, 0x0a, 0x07, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x49,
	0x6e, 0x74, 0x38, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x49, 0x6e, 0x74, 0x38, 0x12,
	0x14, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x49, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x14, 0x0a, 0x05, 0x49,
	0x6e, 0x74, 0x36, 0x34, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x49, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x14, 0x0a, 0x05, 0x55, 0x69, 0x6e, 0x74, 0x38, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x55, 0x69, 0x6e, 0x74, 0x38, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x69, 0x6e, 0x74, 0x31,
	0x36, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12,
	0x16, 0x0a, 0x06, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x06, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x14, 0x0a, 0x05, 0x53, 0x69, 0x6e, 0x74, 0x38, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05,
	0x53, 0x69, 0x6e, 0x74, 0x38, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x53, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x11, 0x52, 0x06, 0x53,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x12, 0x52, 0x06, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x18, 0x0a,
	0x07, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x18, 0x0a, 0x07, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x36, 0x34, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x06, 0x52, 0x07, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36,
	0x34, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0f, 0x52, 0x08, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x10, 0x20, 0x01, 0x28, 0x10, 0x52,
	0x08, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x12, 0x0a, 0x04, 0x42, 0x6f, 0x6f,
	0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x12, 0x4c,
	0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x73, 0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x12, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x38, 0x18, 0x15, 0x20, 0x03, 0x28, 0x05, 0x52,
	0x0c, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x38, 0x12, 0x24, 0x0a,
	0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x18, 0x16,
	0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e,
	0x74, 0x31, 0x36, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x17, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x18, 0x20, 0x03, 0x28, 0x03,
	0x52, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x24, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x38,
	0x18, 0x19, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x55, 0x69, 0x6e, 0x74, 0x38, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x18, 0x1a, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x26, 0x0a,
	0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18,
	0x1b, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x24, 0x0a,
	0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x74, 0x38, 0x18, 0x1d,
	0x20, 0x03, 0x28, 0x11, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69,
	0x6e, 0x74, 0x38, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x69, 0x6e, 0x74, 0x31, 0x36, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x11, 0x52, 0x0e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x26, 0x0a, 0x0e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x1f, 0x20,
	0x03, 0x28, 0x11, 0x52, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x12, 0x26, 0x0a, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x20, 0x20, 0x03, 0x28, 0x12, 0x52, 0x0e, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x28, 0x0a, 0x0f, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x21,
	0x20, 0x03, 0x28, 0x07, 0x52, 0x0f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x22, 0x20, 0x03, 0x28, 0x06, 0x52, 0x0f,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12,
	0x2a, 0x0a, 0x10, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x66, 0x69, 0x78, 0x65,
	0x64, 0x33, 0x32, 0x18, 0x23, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x10, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x2a, 0x0a, 0x10, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18,
	0x24, 0x20, 0x03, 0x28, 0x10, 0x52, 0x10, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x22, 0x0a, 0x0c, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x25, 0x20, 0x03, 0x28, 0x08, 0x52, 0x0c, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x26, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0e, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x18, 0x27, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x0d, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x1a, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x1a, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x38, 0x18, 0x29, 0x20, 0x03,
	0x28, 0x05, 0x52, 0x11, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x49, 0x6e, 0x74, 0x38, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x31, 0x36, 0x18, 0x2a, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x12, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x2b, 0x20, 0x03, 0x28,
	0x05, 0x52, 0x12, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x2c, 0x20, 0x03, 0x28,
	0x03, 0x52, 0x12, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x38, 0x18, 0x2d, 0x20, 0x03, 0x28,
	0x0d, 0x52, 0x12, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x55, 0x69, 0x6e, 0x74, 0x38, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x18, 0x2e, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x13, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x55, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x2f,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x13, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x30, 0x20, 0x03, 0x28, 0x04, 0x52, 0x13, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x2e, 0x0a, 0x12, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x74,
	0x38, 0x18, 0x31, 0x20, 0x03, 0x28, 0x11, 0x52, 0x12, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x74, 0x38, 0x12, 0x30, 0x0a, 0x13, 0x46,
	0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x74,
	0x31, 0x36, 0x18, 0x32, 0x20, 0x03, 0x28, 0x11, 0x52, 0x13, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x74, 0x31, 0x36, 0x12, 0x30, 0x0a,
	0x13, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x18, 0x33, 0x20, 0x03, 0x28, 0x11, 0x52, 0x13, 0x46, 0x69, 0x78, 0x65,
	0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12,
	0x30, 0x0a, 0x13, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x34, 0x20, 0x03, 0x28, 0x12, 0x52, 0x13, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x74, 0x36,
	0x34, 0x12, 0x32, 0x0a, 0x14, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x18, 0x35, 0x20, 0x03, 0x28, 0x07, 0x52,
	0x14, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69,
	0x78, 0x65, 0x64, 0x33, 0x32, 0x12, 0x32, 0x0a, 0x14, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x36, 0x20,
	0x03, 0x28, 0x06, 0x52, 0x14, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64,
	0x33, 0x32, 0x18, 0x37, 0x20, 0x03, 0x28, 0x0f, 0x52, 0x15, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x33, 0x32, 0x12,
	0x34, 0x0a, 0x15, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x53, 0x66, 0x69, 0x78, 0x65, 0x64, 0x36, 0x34, 0x18, 0x38, 0x20, 0x03, 0x28, 0x10, 0x52, 0x15,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53, 0x66, 0x69,
	0x78, 0x65, 0x64, 0x36, 0x34, 0x12, 0x2c, 0x0a, 0x11, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x39, 0x20, 0x03, 0x28, 0x08,
	0x52, 0x11, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42,
	0x6f, 0x6f, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x3a, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x13, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x3c, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x12, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x3d, 0x20, 0x03, 0x28,
	0x0c, 0x52, 0x12, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x3e, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x17, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x66, 0x0a, 0x1f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x18, 0x3f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x2e, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x1f, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x4c, 0x61, 0x72, 0x67, 0x65, 0x73, 0x74, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x18, 0x40,
	0x20, 0x03, 0x28, 0x04, 0x52, 0x13, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x55, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x18, 0x42, 0x20, 0x01, 0x28, 0x07, 0x52,
	0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x12, 0x22, 0x0a,
	0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x44, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x78,
	0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10, 0x43,
	0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x30, 0x0a, 0x13, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x46, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x13, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65,
	0x73, 0x12, 0x3a, 0x0a, 0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x47, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x70, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x3a, 0x0a,
	0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x48, 0x20, 0x03, 0x28, 0x0c, 0x52,
	0x18, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x44, 0x0a, 0x1d, 0x43, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x18, 0x49, 0x20, 0x03, 0x28, 0x0c,
	0x52, 0x1d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x46, 0x69, 0x78, 0x65, 0x64, 0x52, 0x65, 0x70,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x46, 0x69, 0x78, 0x65, 0x64, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x25, 0x0a, 0x05, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x2e, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x52,
	0x05, 0x4f, 0x6e, 0x65, 0x4f, 0x66, 0x42, 0x8a, 0x01, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x2e, 0x65,
	0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x42, 0x0b, 0x43, 0x61, 0x6e, 0x6f, 0x74, 0x6f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x53, 0x74, 0x65, 0x70, 0x68, 0x65, 0x6e, 0x42, 0x75, 0x74, 0x74, 0x6f, 0x6c,
	0x70, 0x68, 0x2f, 0x63, 0x61, 0x6e, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x2f, 0x70, 0x62, 0xa2, 0x02, 0x03, 0x45, 0x58, 0x58, 0xaa, 0x02, 0x08, 0x45, 0x78,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0xca, 0x02, 0x08, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65,
	0x73, 0xe2, 0x02, 0x14, 0x45, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x45, 0x78, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_canoto_proto_rawDescOnce sync.Once
	file_canoto_proto_rawDescData = file_canoto_proto_rawDesc
)

func file_canoto_proto_rawDescGZIP() []byte {
	file_canoto_proto_rawDescOnce.Do(func() {
		file_canoto_proto_rawDescData = protoimpl.X.CompressGZIP(file_canoto_proto_rawDescData)
	})
	return file_canoto_proto_rawDescData
}

var file_canoto_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_canoto_proto_goTypes = []interface{}{
	(*LargestFieldNumber)(nil), // 0: examples.LargestFieldNumber
	(*OneOf)(nil),              // 1: examples.OneOf
	(*Scalars)(nil),            // 2: examples.Scalars
}
var file_canoto_proto_depIdxs = []int32{
	0, // 0: examples.Scalars.LargestFieldNumber:type_name -> examples.LargestFieldNumber
	0, // 1: examples.Scalars.RepeatedLargestFieldNumber:type_name -> examples.LargestFieldNumber
	0, // 2: examples.Scalars.FixedRepeatedLargestFieldNumber:type_name -> examples.LargestFieldNumber
	1, // 3: examples.Scalars.OneOf:type_name -> examples.OneOf
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_canoto_proto_init() }
func file_canoto_proto_init() {
	if File_canoto_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_canoto_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LargestFieldNumber); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_canoto_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OneOf); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_canoto_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scalars); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_canoto_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*OneOf_A1)(nil),
		(*OneOf_A2)(nil),
		(*OneOf_B1)(nil),
		(*OneOf_B2)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_canoto_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_canoto_proto_goTypes,
		DependencyIndexes: file_canoto_proto_depIdxs,
		MessageInfos:      file_canoto_proto_msgTypes,
	}.Build()
	File_canoto_proto = out.File
	file_canoto_proto_rawDesc = nil
	file_canoto_proto_goTypes = nil
	file_canoto_proto_depIdxs = nil
}
