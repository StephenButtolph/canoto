// Code generated by canoto. DO NOT EDIT.
// versions:
// 	canoto v0.11.1
// source: canoto_test.go

package examples

import (
	"io"
	"reflect"
	"slices"
	"sync/atomic"
	"unicode/utf8"

	"github.com/StephenButtolph/canoto"
)

// Ensure that unused imports do not error
var (
	_ atomic.Int64

	_ = slices.Index[[]reflect.Type, reflect.Type]
	_ = io.ErrUnexpectedEOF
	_ = utf8.ValidString
)

const (
	canoto__SpecFuzzer__Int8__tag                       = "\x08"     // canoto.Tag(1, canoto.Varint)
	canoto__SpecFuzzer__Int16__tag                      = "\x10"     // canoto.Tag(2, canoto.Varint)
	canoto__SpecFuzzer__Int32__tag                      = "\x18"     // canoto.Tag(3, canoto.Varint)
	canoto__SpecFuzzer__Int64__tag                      = "\x20"     // canoto.Tag(4, canoto.Varint)
	canoto__SpecFuzzer__Uint8__tag                      = "\x28"     // canoto.Tag(5, canoto.Varint)
	canoto__SpecFuzzer__Uint16__tag                     = "\x30"     // canoto.Tag(6, canoto.Varint)
	canoto__SpecFuzzer__Uint32__tag                     = "\x38"     // canoto.Tag(7, canoto.Varint)
	canoto__SpecFuzzer__Uint64__tag                     = "\x40"     // canoto.Tag(8, canoto.Varint)
	canoto__SpecFuzzer__Sint8__tag                      = "\x48"     // canoto.Tag(9, canoto.Varint)
	canoto__SpecFuzzer__Sint16__tag                     = "\x50"     // canoto.Tag(10, canoto.Varint)
	canoto__SpecFuzzer__Sint32__tag                     = "\x58"     // canoto.Tag(11, canoto.Varint)
	canoto__SpecFuzzer__Sint64__tag                     = "\x60"     // canoto.Tag(12, canoto.Varint)
	canoto__SpecFuzzer__Fixed32__tag                    = "\x6d"     // canoto.Tag(13, canoto.I32)
	canoto__SpecFuzzer__Fixed64__tag                    = "\x71"     // canoto.Tag(14, canoto.I64)
	canoto__SpecFuzzer__Sfixed32__tag                   = "\x7d"     // canoto.Tag(15, canoto.I32)
	canoto__SpecFuzzer__Sfixed64__tag                   = "\x81\x01" // canoto.Tag(16, canoto.I64)
	canoto__SpecFuzzer__Bool__tag                       = "\x88\x01" // canoto.Tag(17, canoto.Varint)
	canoto__SpecFuzzer__String__tag                     = "\x92\x01" // canoto.Tag(18, canoto.Len)
	canoto__SpecFuzzer__Bytes__tag                      = "\x9a\x01" // canoto.Tag(19, canoto.Len)
	canoto__SpecFuzzer__LargestFieldNumber__tag         = "\xa2\x01" // canoto.Tag(20, canoto.Len)
	canoto__SpecFuzzer__RepeatedInt8__tag               = "\xaa\x01" // canoto.Tag(21, canoto.Len)
	canoto__SpecFuzzer__RepeatedInt16__tag              = "\xb2\x01" // canoto.Tag(22, canoto.Len)
	canoto__SpecFuzzer__RepeatedInt32__tag              = "\xba\x01" // canoto.Tag(23, canoto.Len)
	canoto__SpecFuzzer__RepeatedInt64__tag              = "\xc2\x01" // canoto.Tag(24, canoto.Len)
	canoto__SpecFuzzer__RepeatedUint16__tag             = "\xd2\x01" // canoto.Tag(26, canoto.Len)
	canoto__SpecFuzzer__RepeatedUint32__tag             = "\xda\x01" // canoto.Tag(27, canoto.Len)
	canoto__SpecFuzzer__RepeatedUint64__tag             = "\xe2\x01" // canoto.Tag(28, canoto.Len)
	canoto__SpecFuzzer__RepeatedSint8__tag              = "\xea\x01" // canoto.Tag(29, canoto.Len)
	canoto__SpecFuzzer__RepeatedSint16__tag             = "\xf2\x01" // canoto.Tag(30, canoto.Len)
	canoto__SpecFuzzer__RepeatedSint32__tag             = "\xfa\x01" // canoto.Tag(31, canoto.Len)
	canoto__SpecFuzzer__RepeatedSint64__tag             = "\x82\x02" // canoto.Tag(32, canoto.Len)
	canoto__SpecFuzzer__RepeatedFixed32__tag            = "\x8a\x02" // canoto.Tag(33, canoto.Len)
	canoto__SpecFuzzer__RepeatedFixed64__tag            = "\x92\x02" // canoto.Tag(34, canoto.Len)
	canoto__SpecFuzzer__RepeatedSfixed32__tag           = "\x9a\x02" // canoto.Tag(35, canoto.Len)
	canoto__SpecFuzzer__RepeatedSfixed64__tag           = "\xa2\x02" // canoto.Tag(36, canoto.Len)
	canoto__SpecFuzzer__RepeatedBool__tag               = "\xaa\x02" // canoto.Tag(37, canoto.Len)
	canoto__SpecFuzzer__RepeatedString__tag             = "\xb2\x02" // canoto.Tag(38, canoto.Len)
	canoto__SpecFuzzer__RepeatedBytes__tag              = "\xba\x02" // canoto.Tag(39, canoto.Len)
	canoto__SpecFuzzer__RepeatedLargestFieldNumber__tag = "\xc2\x02" // canoto.Tag(40, canoto.Len)
	canoto__SpecFuzzer__CustomUint32__tag               = "\x95\x04" // canoto.Tag(66, canoto.I32)
	canoto__SpecFuzzer__CustomString__tag               = "\x9a\x04" // canoto.Tag(67, canoto.Len)
	canoto__SpecFuzzer__CustomBytes__tag                = "\xa2\x04" // canoto.Tag(68, canoto.Len)
	canoto__SpecFuzzer__CustomRepeatedBytes__tag        = "\xb2\x04" // canoto.Tag(70, canoto.Len)
	canoto__SpecFuzzer__OneOf__tag                      = "\xd2\x04" // canoto.Tag(74, canoto.Len)
	canoto__SpecFuzzer__Pointer__tag                    = "\xda\x04" // canoto.Tag(75, canoto.Len)
	canoto__SpecFuzzer__Field__tag                      = "\xf2\x04" // canoto.Tag(78, canoto.Len)
	canoto__SpecFuzzer__Recursive__tag                  = "\xfa\x04" // canoto.Tag(79, canoto.Len)
)

type canotoData_SpecFuzzer struct {
	size               atomic.Int64
	RepeatedInt8Size   atomic.Int64
	RepeatedInt16Size  atomic.Int64
	RepeatedInt32Size  atomic.Int64
	RepeatedInt64Size  atomic.Int64
	RepeatedUint16Size atomic.Int64
	RepeatedUint32Size atomic.Int64
	RepeatedUint64Size atomic.Int64
	RepeatedSint8Size  atomic.Int64
	RepeatedSint16Size atomic.Int64
	RepeatedSint32Size atomic.Int64
	RepeatedSint64Size atomic.Int64
}

// CanotoSpec returns the specification of this canoto message.
func (*SpecFuzzer) CanotoSpec(types ...reflect.Type) *canoto.Spec {
	types = append(types, reflect.TypeOf(SpecFuzzer{}))
	var zero SpecFuzzer
	s := &canoto.Spec{
		Name: "SpecFuzzer",
		Fields: []*canoto.FieldType{
			canoto.FieldTypeFromInt(
				/*type:       */ zero.Int8,
				/*FieldNumber:*/ 1,
				/*Name:       */ "Int8",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ zero.Int16,
				/*FieldNumber:*/ 2,
				/*Name:       */ "Int16",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ zero.Int32,
				/*FieldNumber:*/ 3,
				/*Name:       */ "Int32",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ zero.Int64,
				/*FieldNumber:*/ 4,
				/*Name:       */ "Int64",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ zero.Uint8,
				/*FieldNumber:*/ 5,
				/*Name:       */ "Uint8",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ zero.Uint16,
				/*FieldNumber:*/ 6,
				/*Name:       */ "Uint16",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ zero.Uint32,
				/*FieldNumber:*/ 7,
				/*Name:       */ "Uint32",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ zero.Uint64,
				/*FieldNumber:*/ 8,
				/*Name:       */ "Uint64",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromSint(
				/*type:       */ zero.Sint8,
				/*FieldNumber:*/ 9,
				/*Name:       */ "Sint8",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromSint(
				/*type:       */ zero.Sint16,
				/*FieldNumber:*/ 10,
				/*Name:       */ "Sint16",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromSint(
				/*type:       */ zero.Sint32,
				/*FieldNumber:*/ 11,
				/*Name:       */ "Sint32",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromSint(
				/*type:       */ zero.Sint64,
				/*FieldNumber:*/ 12,
				/*Name:       */ "Sint64",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromFint(
				/*type:       */ zero.Fixed32,
				/*FieldNumber:*/ 13,
				/*Name:       */ "Fixed32",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromFint(
				/*type:       */ zero.Fixed64,
				/*FieldNumber:*/ 14,
				/*Name:       */ "Fixed64",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromFint(
				/*type:       */ zero.Sfixed32,
				/*FieldNumber:*/ 15,
				/*Name:       */ "Sfixed32",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromFint(
				/*type:       */ zero.Sfixed64,
				/*FieldNumber:*/ 16,
				/*Name:       */ "Sfixed64",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			{
				FieldNumber: 17,
				Name:        "Bool",
				OneOf:       "",
				TypeBool:    true,
			},
			{
				FieldNumber: 18,
				Name:        "String",
				OneOf:       "",
				TypeString:  true,
			},
			{
				FieldNumber: 19,
				Name:        "Bytes",
				OneOf:       "",
				TypeBytes:   true,
			},
			canoto.FieldTypeFromField(
				/*type:       */ (zero.LargestFieldNumber),
				/*FieldNumber:*/ 20,
				/*Name:       */ "LargestFieldNumber",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
				/*types:      */ types,
			),
			canoto.FieldTypeFromInt(
				/*type:       */ canoto.MakeEntry(zero.RepeatedInt8),
				/*FieldNumber:*/ 21,
				/*Name:       */ "RepeatedInt8",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ canoto.MakeEntry(zero.RepeatedInt16),
				/*FieldNumber:*/ 22,
				/*Name:       */ "RepeatedInt16",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ canoto.MakeEntry(zero.RepeatedInt32),
				/*FieldNumber:*/ 23,
				/*Name:       */ "RepeatedInt32",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ canoto.MakeEntry(zero.RepeatedInt64),
				/*FieldNumber:*/ 24,
				/*Name:       */ "RepeatedInt64",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ canoto.MakeEntry(zero.RepeatedUint16),
				/*FieldNumber:*/ 26,
				/*Name:       */ "RepeatedUint16",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ canoto.MakeEntry(zero.RepeatedUint32),
				/*FieldNumber:*/ 27,
				/*Name:       */ "RepeatedUint32",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ canoto.MakeEntry(zero.RepeatedUint64),
				/*FieldNumber:*/ 28,
				/*Name:       */ "RepeatedUint64",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromSint(
				/*type:       */ canoto.MakeEntry(zero.RepeatedSint8),
				/*FieldNumber:*/ 29,
				/*Name:       */ "RepeatedSint8",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromSint(
				/*type:       */ canoto.MakeEntry(zero.RepeatedSint16),
				/*FieldNumber:*/ 30,
				/*Name:       */ "RepeatedSint16",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromSint(
				/*type:       */ canoto.MakeEntry(zero.RepeatedSint32),
				/*FieldNumber:*/ 31,
				/*Name:       */ "RepeatedSint32",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromSint(
				/*type:       */ canoto.MakeEntry(zero.RepeatedSint64),
				/*FieldNumber:*/ 32,
				/*Name:       */ "RepeatedSint64",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromFint(
				/*type:       */ canoto.MakeEntry(zero.RepeatedFixed32),
				/*FieldNumber:*/ 33,
				/*Name:       */ "RepeatedFixed32",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromFint(
				/*type:       */ canoto.MakeEntry(zero.RepeatedFixed64),
				/*FieldNumber:*/ 34,
				/*Name:       */ "RepeatedFixed64",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromFint(
				/*type:       */ canoto.MakeEntry(zero.RepeatedSfixed32),
				/*FieldNumber:*/ 35,
				/*Name:       */ "RepeatedSfixed32",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromFint(
				/*type:       */ canoto.MakeEntry(zero.RepeatedSfixed64),
				/*FieldNumber:*/ 36,
				/*Name:       */ "RepeatedSfixed64",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
			),
			{
				FieldNumber: 37,
				Name:        "RepeatedBool",
				Repeated:    true,
				OneOf:       "",
				TypeBool:    true,
			},
			{
				FieldNumber: 38,
				Name:        "RepeatedString",
				Repeated:    true,
				OneOf:       "",
				TypeString:  true,
			},
			{
				FieldNumber: 39,
				Name:        "RepeatedBytes",
				Repeated:    true,
				OneOf:       "",
				TypeBytes:   true,
			},
			canoto.FieldTypeFromField(
				/*type:       */ (canoto.MakeEntryPointer(zero.RepeatedLargestFieldNumber)),
				/*FieldNumber:*/ 40,
				/*Name:       */ "RepeatedLargestFieldNumber",
				/*FixedLength:*/ 0,
				/*Repeated:   */ true,
				/*OneOf:      */ "",
				/*types:      */ types,
			),
			canoto.FieldTypeFromFint(
				/*type:       */ zero.CustomUint32,
				/*FieldNumber:*/ 66,
				/*Name:       */ "CustomUint32",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			{
				FieldNumber: 67,
				Name:        "CustomString",
				OneOf:       "",
				TypeString:  true,
			},
			{
				FieldNumber: 68,
				Name:        "CustomBytes",
				OneOf:       "",
				TypeBytes:   true,
			},
			{
				FieldNumber: 70,
				Name:        "CustomRepeatedBytes",
				Repeated:    true,
				OneOf:       "",
				TypeBytes:   true,
			},
			canoto.FieldTypeFromField(
				/*type:       */ (zero.OneOf),
				/*FieldNumber:*/ 74,
				/*Name:       */ "OneOf",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
				/*types:      */ types,
			),
			canoto.FieldTypeFromField(
				/*type:       */ (zero.Pointer),
				/*FieldNumber:*/ 75,
				/*Name:       */ "Pointer",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
				/*types:      */ types,
			),
			canoto.FieldTypeFromField(
				/*type:       */ zero.Field,
				/*FieldNumber:*/ 78,
				/*Name:       */ "Field",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
				/*types:      */ types,
			),
			canoto.FieldTypeFromField(
				/*type:       */ (zero.Recursive),
				/*FieldNumber:*/ 79,
				/*Name:       */ "Recursive",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
				/*types:      */ types,
			),
		},
	}
	s.CalculateCanotoCache()
	return s
}

// MakeCanoto creates a new empty value.
func (*SpecFuzzer) MakeCanoto() *SpecFuzzer {
	return new(SpecFuzzer)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// During parsing, the canoto cache is saved.
func (c *SpecFuzzer) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// During parsing, the canoto cache is saved.
//
// This function enables configuration of reader options.
func (c *SpecFuzzer) UnmarshalCanotoFrom(r canoto.Reader) error {
	// Zero the struct before unmarshaling.
	*c = SpecFuzzer{}
	c.canotoData.size.Store(int64(len(r.B)))

	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.Int8); err != nil {
				return err
			}
			if canoto.IsZero(c.Int8) {
				return canoto.ErrZeroValue
			}
		case 2:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.Int16); err != nil {
				return err
			}
			if canoto.IsZero(c.Int16) {
				return canoto.ErrZeroValue
			}
		case 3:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.Int32); err != nil {
				return err
			}
			if canoto.IsZero(c.Int32) {
				return canoto.ErrZeroValue
			}
		case 4:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.Int64); err != nil {
				return err
			}
			if canoto.IsZero(c.Int64) {
				return canoto.ErrZeroValue
			}
		case 5:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.Uint8); err != nil {
				return err
			}
			if canoto.IsZero(c.Uint8) {
				return canoto.ErrZeroValue
			}
		case 6:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.Uint16); err != nil {
				return err
			}
			if canoto.IsZero(c.Uint16) {
				return canoto.ErrZeroValue
			}
		case 7:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.Uint32); err != nil {
				return err
			}
			if canoto.IsZero(c.Uint32) {
				return canoto.ErrZeroValue
			}
		case 8:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.Uint64); err != nil {
				return err
			}
			if canoto.IsZero(c.Uint64) {
				return canoto.ErrZeroValue
			}
		case 9:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadSint(&r, &c.Sint8); err != nil {
				return err
			}
			if canoto.IsZero(c.Sint8) {
				return canoto.ErrZeroValue
			}
		case 10:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadSint(&r, &c.Sint16); err != nil {
				return err
			}
			if canoto.IsZero(c.Sint16) {
				return canoto.ErrZeroValue
			}
		case 11:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadSint(&r, &c.Sint32); err != nil {
				return err
			}
			if canoto.IsZero(c.Sint32) {
				return canoto.ErrZeroValue
			}
		case 12:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadSint(&r, &c.Sint64); err != nil {
				return err
			}
			if canoto.IsZero(c.Sint64) {
				return canoto.ErrZeroValue
			}
		case 13:
			if wireType != canoto.I32 {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadFint32(&r, &c.Fixed32); err != nil {
				return err
			}
			if canoto.IsZero(c.Fixed32) {
				return canoto.ErrZeroValue
			}
		case 14:
			if wireType != canoto.I64 {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadFint64(&r, &c.Fixed64); err != nil {
				return err
			}
			if canoto.IsZero(c.Fixed64) {
				return canoto.ErrZeroValue
			}
		case 15:
			if wireType != canoto.I32 {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadFint32(&r, &c.Sfixed32); err != nil {
				return err
			}
			if canoto.IsZero(c.Sfixed32) {
				return canoto.ErrZeroValue
			}
		case 16:
			if wireType != canoto.I64 {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadFint64(&r, &c.Sfixed64); err != nil {
				return err
			}
			if canoto.IsZero(c.Sfixed64) {
				return canoto.ErrZeroValue
			}
		case 17:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadBool(&r, &c.Bool); err != nil {
				return err
			}
			if canoto.IsZero(c.Bool) {
				return canoto.ErrZeroValue
			}
		case 18:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadString(&r, &c.String); err != nil {
				return err
			}
			if len(c.String) == 0 {
				return canoto.ErrZeroValue
			}
		case 19:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadBytes(&r, &c.Bytes); err != nil {
				return err
			}
			if len(c.Bytes) == 0 {
				return canoto.ErrZeroValue
			}
		case 20:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the bytes for the field.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Unmarshal the field from the bytes.
			remainingBytes := r.B
			r.B = msgBytes
			c.LargestFieldNumber = canoto.MakePointer(c.LargestFieldNumber)
			if err := (c.LargestFieldNumber).UnmarshalCanotoFrom(r); err != nil {
				return err
			}
			r.B = remainingBytes
		case 21:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedInt8 = canoto.MakeSlice(c.RepeatedInt8, canoto.CountInts(msgBytes))
			for i := range c.RepeatedInt8 {
				if err := canoto.ReadInt(&r, &c.RepeatedInt8[i]); err != nil {
					return err
				}
			}
			if canoto.HasNext(&r) {
				return canoto.ErrInvalidLength
			}
			r.B = remainingBytes
			c.canotoData.RepeatedInt8Size.Store(int64(len(msgBytes)))
		case 22:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedInt16 = canoto.MakeSlice(c.RepeatedInt16, canoto.CountInts(msgBytes))
			for i := range c.RepeatedInt16 {
				if err := canoto.ReadInt(&r, &c.RepeatedInt16[i]); err != nil {
					return err
				}
			}
			if canoto.HasNext(&r) {
				return canoto.ErrInvalidLength
			}
			r.B = remainingBytes
			c.canotoData.RepeatedInt16Size.Store(int64(len(msgBytes)))
		case 23:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedInt32 = canoto.MakeSlice(c.RepeatedInt32, canoto.CountInts(msgBytes))
			for i := range c.RepeatedInt32 {
				if err := canoto.ReadInt(&r, &c.RepeatedInt32[i]); err != nil {
					return err
				}
			}
			if canoto.HasNext(&r) {
				return canoto.ErrInvalidLength
			}
			r.B = remainingBytes
			c.canotoData.RepeatedInt32Size.Store(int64(len(msgBytes)))
		case 24:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedInt64 = canoto.MakeSlice(c.RepeatedInt64, canoto.CountInts(msgBytes))
			for i := range c.RepeatedInt64 {
				if err := canoto.ReadInt(&r, &c.RepeatedInt64[i]); err != nil {
					return err
				}
			}
			if canoto.HasNext(&r) {
				return canoto.ErrInvalidLength
			}
			r.B = remainingBytes
			c.canotoData.RepeatedInt64Size.Store(int64(len(msgBytes)))
		case 26:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedUint16 = canoto.MakeSlice(c.RepeatedUint16, canoto.CountInts(msgBytes))
			for i := range c.RepeatedUint16 {
				if err := canoto.ReadInt(&r, &c.RepeatedUint16[i]); err != nil {
					return err
				}
			}
			if canoto.HasNext(&r) {
				return canoto.ErrInvalidLength
			}
			r.B = remainingBytes
			c.canotoData.RepeatedUint16Size.Store(int64(len(msgBytes)))
		case 27:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedUint32 = canoto.MakeSlice(c.RepeatedUint32, canoto.CountInts(msgBytes))
			for i := range c.RepeatedUint32 {
				if err := canoto.ReadInt(&r, &c.RepeatedUint32[i]); err != nil {
					return err
				}
			}
			if canoto.HasNext(&r) {
				return canoto.ErrInvalidLength
			}
			r.B = remainingBytes
			c.canotoData.RepeatedUint32Size.Store(int64(len(msgBytes)))
		case 28:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedUint64 = canoto.MakeSlice(c.RepeatedUint64, canoto.CountInts(msgBytes))
			for i := range c.RepeatedUint64 {
				if err := canoto.ReadInt(&r, &c.RepeatedUint64[i]); err != nil {
					return err
				}
			}
			if canoto.HasNext(&r) {
				return canoto.ErrInvalidLength
			}
			r.B = remainingBytes
			c.canotoData.RepeatedUint64Size.Store(int64(len(msgBytes)))
		case 29:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedSint8 = canoto.MakeSlice(c.RepeatedSint8, canoto.CountInts(msgBytes))
			for i := range c.RepeatedSint8 {
				if err := canoto.ReadSint(&r, &c.RepeatedSint8[i]); err != nil {
					return err
				}
			}
			if canoto.HasNext(&r) {
				return canoto.ErrInvalidLength
			}
			r.B = remainingBytes
			c.canotoData.RepeatedSint8Size.Store(int64(len(msgBytes)))
		case 30:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedSint16 = canoto.MakeSlice(c.RepeatedSint16, canoto.CountInts(msgBytes))
			for i := range c.RepeatedSint16 {
				if err := canoto.ReadSint(&r, &c.RepeatedSint16[i]); err != nil {
					return err
				}
			}
			if canoto.HasNext(&r) {
				return canoto.ErrInvalidLength
			}
			r.B = remainingBytes
			c.canotoData.RepeatedSint16Size.Store(int64(len(msgBytes)))
		case 31:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedSint32 = canoto.MakeSlice(c.RepeatedSint32, canoto.CountInts(msgBytes))
			for i := range c.RepeatedSint32 {
				if err := canoto.ReadSint(&r, &c.RepeatedSint32[i]); err != nil {
					return err
				}
			}
			if canoto.HasNext(&r) {
				return canoto.ErrInvalidLength
			}
			r.B = remainingBytes
			c.canotoData.RepeatedSint32Size.Store(int64(len(msgBytes)))
		case 32:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedSint64 = canoto.MakeSlice(c.RepeatedSint64, canoto.CountInts(msgBytes))
			for i := range c.RepeatedSint64 {
				if err := canoto.ReadSint(&r, &c.RepeatedSint64[i]); err != nil {
					return err
				}
			}
			if canoto.HasNext(&r) {
				return canoto.ErrInvalidLength
			}
			r.B = remainingBytes
			c.canotoData.RepeatedSint64Size.Store(int64(len(msgBytes)))
		case 33:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			r.Unsafe = originalUnsafe

			// Verify the length of the packed field bytes.
			numMsgBytes := uint(len(msgBytes))
			if numMsgBytes == 0 {
				return canoto.ErrZeroValue
			}
			if numMsgBytes%canoto.SizeFint32 != 0 {
				return canoto.ErrInvalidLength
			}

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedFixed32 = canoto.MakeSlice(c.RepeatedFixed32, int(numMsgBytes/canoto.SizeFint32))
			for i := range c.RepeatedFixed32 {
				if err := canoto.ReadFint32(&r, &c.RepeatedFixed32[i]); err != nil {
					return err
				}
			}
			r.B = remainingBytes
		case 34:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			r.Unsafe = originalUnsafe

			// Verify the length of the packed field bytes.
			numMsgBytes := uint(len(msgBytes))
			if numMsgBytes == 0 {
				return canoto.ErrZeroValue
			}
			if numMsgBytes%canoto.SizeFint64 != 0 {
				return canoto.ErrInvalidLength
			}

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedFixed64 = canoto.MakeSlice(c.RepeatedFixed64, int(numMsgBytes/canoto.SizeFint64))
			for i := range c.RepeatedFixed64 {
				if err := canoto.ReadFint64(&r, &c.RepeatedFixed64[i]); err != nil {
					return err
				}
			}
			r.B = remainingBytes
		case 35:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			r.Unsafe = originalUnsafe

			// Verify the length of the packed field bytes.
			numMsgBytes := uint(len(msgBytes))
			if numMsgBytes == 0 {
				return canoto.ErrZeroValue
			}
			if numMsgBytes%canoto.SizeFint32 != 0 {
				return canoto.ErrInvalidLength
			}

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedSfixed32 = canoto.MakeSlice(c.RepeatedSfixed32, int(numMsgBytes/canoto.SizeFint32))
			for i := range c.RepeatedSfixed32 {
				if err := canoto.ReadFint32(&r, &c.RepeatedSfixed32[i]); err != nil {
					return err
				}
			}
			r.B = remainingBytes
		case 36:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			r.Unsafe = originalUnsafe

			// Verify the length of the packed field bytes.
			numMsgBytes := uint(len(msgBytes))
			if numMsgBytes == 0 {
				return canoto.ErrZeroValue
			}
			if numMsgBytes%canoto.SizeFint64 != 0 {
				return canoto.ErrInvalidLength
			}

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedSfixed64 = canoto.MakeSlice(c.RepeatedSfixed64, int(numMsgBytes/canoto.SizeFint64))
			for i := range c.RepeatedSfixed64 {
				if err := canoto.ReadFint64(&r, &c.RepeatedSfixed64[i]); err != nil {
					return err
				}
			}
			r.B = remainingBytes
		case 37:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the packed field bytes.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			r.Unsafe = originalUnsafe

			// Verify the length of the packed field bytes.
			numMsgBytes := uint(len(msgBytes))
			if numMsgBytes == 0 {
				return canoto.ErrZeroValue
			}
			if numMsgBytes%canoto.SizeBool != 0 {
				return canoto.ErrInvalidLength
			}

			// Read each value from the packed field bytes into the array.
			remainingBytes := r.B
			r.B = msgBytes
			c.RepeatedBool = canoto.MakeSlice(c.RepeatedBool, int(numMsgBytes/canoto.SizeBool))
			for i := range c.RepeatedBool {
				if err := canoto.ReadBool(&r, &c.RepeatedBool[i]); err != nil {
					return err
				}
			}
			r.B = remainingBytes
		case 38:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Skip the first entry because we have already stripped the tag.
			remainingBytes := r.B
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			if err := canoto.ReadBytes(&r, new([]byte)); err != nil {
				return err
			}
			r.Unsafe = originalUnsafe

			// Count the number of additional entries after the first entry.
			countMinus1, err := canoto.CountBytes(r.B, canoto__SpecFuzzer__RepeatedString__tag)
			if err != nil {
				return err
			}
			c.RepeatedString = canoto.MakeSlice(c.RepeatedString, countMinus1+1)

			// Read the first entry manually because the tag is still already
			// stripped.
			r.B = remainingBytes
			if err := canoto.ReadString(&r, &c.RepeatedString[0]); err != nil {
				return err
			}

			// Read the rest of the entries, stripping the tag each time.
			for i := range countMinus1 {
				r.B = r.B[len(canoto__SpecFuzzer__RepeatedString__tag):]
				if err := canoto.ReadString(&r, &c.RepeatedString[1+i]); err != nil {
					return err
				}
			}
		case 39:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Skip the first entry because we have already stripped the tag.
			remainingBytes := r.B
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			if err := canoto.ReadBytes(&r, new([]byte)); err != nil {
				return err
			}
			r.Unsafe = originalUnsafe

			// Count the number of additional entries after the first entry.
			countMinus1, err := canoto.CountBytes(r.B, canoto__SpecFuzzer__RepeatedBytes__tag)
			if err != nil {
				return err
			}
			c.RepeatedBytes = canoto.MakeSlice(c.RepeatedBytes, countMinus1+1)

			// Read the first entry manually because the tag is still already
			// stripped.
			r.B = remainingBytes
			if err := canoto.ReadBytes(&r, &c.RepeatedBytes[0]); err != nil {
				return err
			}

			// Read the rest of the entries, stripping the tag each time.
			for i := range countMinus1 {
				r.B = r.B[len(canoto__SpecFuzzer__RepeatedBytes__tag):]
				if err := canoto.ReadBytes(&r, &c.RepeatedBytes[1+i]); err != nil {
					return err
				}
			}
		case 40:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the first entry manually because the tag is already
			// stripped.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			r.Unsafe = originalUnsafe

			// Count the number of additional entries after the first entry.
			countMinus1, err := canoto.CountBytes(r.B, canoto__SpecFuzzer__RepeatedLargestFieldNumber__tag)
			if err != nil {
				return err
			}

			c.RepeatedLargestFieldNumber = canoto.MakeSlice(c.RepeatedLargestFieldNumber, countMinus1+1)
			if len(msgBytes) != 0 {
				remainingBytes := r.B
				r.B = msgBytes
				if err := (&c.RepeatedLargestFieldNumber[0]).UnmarshalCanotoFrom(r); err != nil {
					return err
				}
				r.B = remainingBytes
			}

			// Read the rest of the entries, stripping the tag each time.
			for i := range countMinus1 {
				r.B = r.B[len(canoto__SpecFuzzer__RepeatedLargestFieldNumber__tag):]
				r.Unsafe = true
				if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
					return err
				}
				if len(msgBytes) == 0 {
					continue
				}
				r.Unsafe = originalUnsafe

				remainingBytes := r.B
				r.B = msgBytes
				if err := (&c.RepeatedLargestFieldNumber[1+i]).UnmarshalCanotoFrom(r); err != nil {
					return err
				}
				r.B = remainingBytes
			}
		case 66:
			if wireType != canoto.I32 {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadFint32(&r, &c.CustomUint32); err != nil {
				return err
			}
			if canoto.IsZero(c.CustomUint32) {
				return canoto.ErrZeroValue
			}
		case 67:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadString(&r, &c.CustomString); err != nil {
				return err
			}
			if len(c.CustomString) == 0 {
				return canoto.ErrZeroValue
			}
		case 68:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadBytes(&r, &c.CustomBytes); err != nil {
				return err
			}
			if len(c.CustomBytes) == 0 {
				return canoto.ErrZeroValue
			}
		case 70:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Skip the first entry because we have already stripped the tag.
			remainingBytes := r.B
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			if err := canoto.ReadBytes(&r, new([]byte)); err != nil {
				return err
			}
			r.Unsafe = originalUnsafe

			// Count the number of additional entries after the first entry.
			countMinus1, err := canoto.CountBytes(r.B, canoto__SpecFuzzer__CustomRepeatedBytes__tag)
			if err != nil {
				return err
			}
			c.CustomRepeatedBytes = canoto.MakeSlice(c.CustomRepeatedBytes, countMinus1+1)

			// Read the first entry manually because the tag is still already
			// stripped.
			r.B = remainingBytes
			if err := canoto.ReadBytes(&r, &c.CustomRepeatedBytes[0]); err != nil {
				return err
			}

			// Read the rest of the entries, stripping the tag each time.
			for i := range countMinus1 {
				r.B = r.B[len(canoto__SpecFuzzer__CustomRepeatedBytes__tag):]
				if err := canoto.ReadBytes(&r, &c.CustomRepeatedBytes[1+i]); err != nil {
					return err
				}
			}
		case 74:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the bytes for the field.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Unmarshal the field from the bytes.
			remainingBytes := r.B
			r.B = msgBytes
			c.OneOf = canoto.MakePointer(c.OneOf)
			if err := (c.OneOf).UnmarshalCanotoFrom(r); err != nil {
				return err
			}
			r.B = remainingBytes
		case 75:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the bytes for the field.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Unmarshal the field from the bytes.
			remainingBytes := r.B
			r.B = msgBytes
			c.Pointer = canoto.MakePointer(c.Pointer)
			if err := (c.Pointer).UnmarshalCanotoFrom(r); err != nil {
				return err
			}
			r.B = remainingBytes
		case 78:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the bytes for the field.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Unmarshal the field from the bytes.
			remainingBytes := r.B
			r.B = msgBytes
			c.Field = c.Field.MakeCanoto()
			if err := c.Field.UnmarshalCanotoFrom(r); err != nil {
				return err
			}
			r.B = remainingBytes
		case 79:
			if wireType != canoto.Len {
				return canoto.ErrUnexpectedWireType
			}

			// Read the bytes for the field.
			originalUnsafe := r.Unsafe
			r.Unsafe = true
			var msgBytes []byte
			if err := canoto.ReadBytes(&r, &msgBytes); err != nil {
				return err
			}
			if len(msgBytes) == 0 {
				return canoto.ErrZeroValue
			}
			r.Unsafe = originalUnsafe

			// Unmarshal the field from the bytes.
			remainingBytes := r.B
			r.B = msgBytes
			c.Recursive = canoto.MakePointer(c.Recursive)
			if err := (c.Recursive).UnmarshalCanotoFrom(r); err != nil {
				return err
			}
			r.B = remainingBytes
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *SpecFuzzer) ValidCanoto() bool {
	if c == nil {
		return true
	}
	if !utf8.ValidString(string(c.String)) {
		return false
	}
	if c.LargestFieldNumber != nil && !(c.LargestFieldNumber).ValidCanoto() {
		return false
	}
	for _, v := range c.RepeatedString {
		if !utf8.ValidString(string(v)) {
			return false
		}
	}
	for i := range c.RepeatedLargestFieldNumber {
		if !(&c.RepeatedLargestFieldNumber[i]).ValidCanoto() {
			return false
		}
	}
	if !utf8.ValidString(string(c.CustomString)) {
		return false
	}
	if c.OneOf != nil && !(c.OneOf).ValidCanoto() {
		return false
	}
	if c.Pointer != nil && !(c.Pointer).ValidCanoto() {
		return false
	}
	if !c.Field.ValidCanoto() {
		return false
	}
	if c.Recursive != nil && !(c.Recursive).ValidCanoto() {
		return false
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
func (c *SpecFuzzer) CalculateCanotoCache() {
	if c == nil {
		return
	}
	var (
		size int
	)
	if !canoto.IsZero(c.Int8) {
		size += len(canoto__SpecFuzzer__Int8__tag) + canoto.SizeInt(c.Int8)
	}
	if !canoto.IsZero(c.Int16) {
		size += len(canoto__SpecFuzzer__Int16__tag) + canoto.SizeInt(c.Int16)
	}
	if !canoto.IsZero(c.Int32) {
		size += len(canoto__SpecFuzzer__Int32__tag) + canoto.SizeInt(c.Int32)
	}
	if !canoto.IsZero(c.Int64) {
		size += len(canoto__SpecFuzzer__Int64__tag) + canoto.SizeInt(c.Int64)
	}
	if !canoto.IsZero(c.Uint8) {
		size += len(canoto__SpecFuzzer__Uint8__tag) + canoto.SizeInt(c.Uint8)
	}
	if !canoto.IsZero(c.Uint16) {
		size += len(canoto__SpecFuzzer__Uint16__tag) + canoto.SizeInt(c.Uint16)
	}
	if !canoto.IsZero(c.Uint32) {
		size += len(canoto__SpecFuzzer__Uint32__tag) + canoto.SizeInt(c.Uint32)
	}
	if !canoto.IsZero(c.Uint64) {
		size += len(canoto__SpecFuzzer__Uint64__tag) + canoto.SizeInt(c.Uint64)
	}
	if !canoto.IsZero(c.Sint8) {
		size += len(canoto__SpecFuzzer__Sint8__tag) + canoto.SizeSint(c.Sint8)
	}
	if !canoto.IsZero(c.Sint16) {
		size += len(canoto__SpecFuzzer__Sint16__tag) + canoto.SizeSint(c.Sint16)
	}
	if !canoto.IsZero(c.Sint32) {
		size += len(canoto__SpecFuzzer__Sint32__tag) + canoto.SizeSint(c.Sint32)
	}
	if !canoto.IsZero(c.Sint64) {
		size += len(canoto__SpecFuzzer__Sint64__tag) + canoto.SizeSint(c.Sint64)
	}
	if !canoto.IsZero(c.Fixed32) {
		size += len(canoto__SpecFuzzer__Fixed32__tag) + canoto.SizeFint32
	}
	if !canoto.IsZero(c.Fixed64) {
		size += len(canoto__SpecFuzzer__Fixed64__tag) + canoto.SizeFint64
	}
	if !canoto.IsZero(c.Sfixed32) {
		size += len(canoto__SpecFuzzer__Sfixed32__tag) + canoto.SizeFint32
	}
	if !canoto.IsZero(c.Sfixed64) {
		size += len(canoto__SpecFuzzer__Sfixed64__tag) + canoto.SizeFint64
	}
	if !canoto.IsZero(c.Bool) {
		size += len(canoto__SpecFuzzer__Bool__tag) + canoto.SizeBool
	}
	if len(c.String) != 0 {
		size += len(canoto__SpecFuzzer__String__tag) + canoto.SizeBytes(c.String)
	}
	if len(c.Bytes) != 0 {
		size += len(canoto__SpecFuzzer__Bytes__tag) + canoto.SizeBytes(c.Bytes)
	}
	if c.LargestFieldNumber != nil {
		(c.LargestFieldNumber).CalculateCanotoCache()
		if fieldSize := (c.LargestFieldNumber).CachedCanotoSize(); fieldSize != 0 {
			size += len(canoto__SpecFuzzer__LargestFieldNumber__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		}
	}
	if len(c.RepeatedInt8) != 0 {
		var fieldSize int
		for _, v := range c.RepeatedInt8 {
			fieldSize += canoto.SizeInt(v)
		}
		size += len(canoto__SpecFuzzer__RepeatedInt8__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.RepeatedInt8Size.Store(int64(fieldSize))
	}
	if len(c.RepeatedInt16) != 0 {
		var fieldSize int
		for _, v := range c.RepeatedInt16 {
			fieldSize += canoto.SizeInt(v)
		}
		size += len(canoto__SpecFuzzer__RepeatedInt16__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.RepeatedInt16Size.Store(int64(fieldSize))
	}
	if len(c.RepeatedInt32) != 0 {
		var fieldSize int
		for _, v := range c.RepeatedInt32 {
			fieldSize += canoto.SizeInt(v)
		}
		size += len(canoto__SpecFuzzer__RepeatedInt32__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.RepeatedInt32Size.Store(int64(fieldSize))
	}
	if len(c.RepeatedInt64) != 0 {
		var fieldSize int
		for _, v := range c.RepeatedInt64 {
			fieldSize += canoto.SizeInt(v)
		}
		size += len(canoto__SpecFuzzer__RepeatedInt64__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.RepeatedInt64Size.Store(int64(fieldSize))
	}
	if len(c.RepeatedUint16) != 0 {
		var fieldSize int
		for _, v := range c.RepeatedUint16 {
			fieldSize += canoto.SizeInt(v)
		}
		size += len(canoto__SpecFuzzer__RepeatedUint16__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.RepeatedUint16Size.Store(int64(fieldSize))
	}
	if len(c.RepeatedUint32) != 0 {
		var fieldSize int
		for _, v := range c.RepeatedUint32 {
			fieldSize += canoto.SizeInt(v)
		}
		size += len(canoto__SpecFuzzer__RepeatedUint32__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.RepeatedUint32Size.Store(int64(fieldSize))
	}
	if len(c.RepeatedUint64) != 0 {
		var fieldSize int
		for _, v := range c.RepeatedUint64 {
			fieldSize += canoto.SizeInt(v)
		}
		size += len(canoto__SpecFuzzer__RepeatedUint64__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.RepeatedUint64Size.Store(int64(fieldSize))
	}
	if len(c.RepeatedSint8) != 0 {
		var fieldSize int
		for _, v := range c.RepeatedSint8 {
			fieldSize += canoto.SizeSint(v)
		}
		size += len(canoto__SpecFuzzer__RepeatedSint8__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.RepeatedSint8Size.Store(int64(fieldSize))
	}
	if len(c.RepeatedSint16) != 0 {
		var fieldSize int
		for _, v := range c.RepeatedSint16 {
			fieldSize += canoto.SizeSint(v)
		}
		size += len(canoto__SpecFuzzer__RepeatedSint16__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.RepeatedSint16Size.Store(int64(fieldSize))
	}
	if len(c.RepeatedSint32) != 0 {
		var fieldSize int
		for _, v := range c.RepeatedSint32 {
			fieldSize += canoto.SizeSint(v)
		}
		size += len(canoto__SpecFuzzer__RepeatedSint32__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.RepeatedSint32Size.Store(int64(fieldSize))
	}
	if len(c.RepeatedSint64) != 0 {
		var fieldSize int
		for _, v := range c.RepeatedSint64 {
			fieldSize += canoto.SizeSint(v)
		}
		size += len(canoto__SpecFuzzer__RepeatedSint64__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		c.canotoData.RepeatedSint64Size.Store(int64(fieldSize))
	}
	if num := len(c.RepeatedFixed32); num != 0 {
		fieldSize := num * canoto.SizeFint32
		size += len(canoto__SpecFuzzer__RepeatedFixed32__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
	if num := len(c.RepeatedFixed64); num != 0 {
		fieldSize := num * canoto.SizeFint64
		size += len(canoto__SpecFuzzer__RepeatedFixed64__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
	if num := len(c.RepeatedSfixed32); num != 0 {
		fieldSize := num * canoto.SizeFint32
		size += len(canoto__SpecFuzzer__RepeatedSfixed32__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
	if num := len(c.RepeatedSfixed64); num != 0 {
		fieldSize := num * canoto.SizeFint64
		size += len(canoto__SpecFuzzer__RepeatedSfixed64__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
	if num := len(c.RepeatedBool); num != 0 {
		fieldSize := num * canoto.SizeBool
		size += len(canoto__SpecFuzzer__RepeatedBool__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
	for _, v := range c.RepeatedString {
		size += len(canoto__SpecFuzzer__RepeatedString__tag) + canoto.SizeBytes(v)
	}
	for _, v := range c.RepeatedBytes {
		size += len(canoto__SpecFuzzer__RepeatedBytes__tag) + canoto.SizeBytes(v)
	}
	for i := range c.RepeatedLargestFieldNumber {
		(&c.RepeatedLargestFieldNumber[i]).CalculateCanotoCache()
		fieldSize := (&c.RepeatedLargestFieldNumber[i]).CachedCanotoSize()
		size += len(canoto__SpecFuzzer__RepeatedLargestFieldNumber__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
	if !canoto.IsZero(c.CustomUint32) {
		size += len(canoto__SpecFuzzer__CustomUint32__tag) + canoto.SizeFint32
	}
	if len(c.CustomString) != 0 {
		size += len(canoto__SpecFuzzer__CustomString__tag) + canoto.SizeBytes(c.CustomString)
	}
	if len(c.CustomBytes) != 0 {
		size += len(canoto__SpecFuzzer__CustomBytes__tag) + canoto.SizeBytes(c.CustomBytes)
	}
	for _, v := range c.CustomRepeatedBytes {
		size += len(canoto__SpecFuzzer__CustomRepeatedBytes__tag) + canoto.SizeBytes(v)
	}
	if c.OneOf != nil {
		(c.OneOf).CalculateCanotoCache()
		if fieldSize := (c.OneOf).CachedCanotoSize(); fieldSize != 0 {
			size += len(canoto__SpecFuzzer__OneOf__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		}
	}
	if c.Pointer != nil {
		(c.Pointer).CalculateCanotoCache()
		if fieldSize := (c.Pointer).CachedCanotoSize(); fieldSize != 0 {
			size += len(canoto__SpecFuzzer__Pointer__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		}
	}
	c.Field.CalculateCanotoCache()
	if fieldSize := c.Field.CachedCanotoSize(); fieldSize != 0 {
		size += len(canoto__SpecFuzzer__Field__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
	}
	if c.Recursive != nil {
		(c.Recursive).CalculateCanotoCache()
		if fieldSize := (c.Recursive).CachedCanotoSize(); fieldSize != 0 {
			size += len(canoto__SpecFuzzer__Recursive__tag) + canoto.SizeInt(int64(fieldSize)) + fieldSize
		}
	}
	c.canotoData.size.Store(int64(size))
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *SpecFuzzer) CachedCanotoSize() int {
	if c == nil {
		return 0
	}
	return int(c.canotoData.size.Load())
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *SpecFuzzer) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *SpecFuzzer) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if !canoto.IsZero(c.Int8) {
		canoto.Append(&w, canoto__SpecFuzzer__Int8__tag)
		canoto.AppendInt(&w, c.Int8)
	}
	if !canoto.IsZero(c.Int16) {
		canoto.Append(&w, canoto__SpecFuzzer__Int16__tag)
		canoto.AppendInt(&w, c.Int16)
	}
	if !canoto.IsZero(c.Int32) {
		canoto.Append(&w, canoto__SpecFuzzer__Int32__tag)
		canoto.AppendInt(&w, c.Int32)
	}
	if !canoto.IsZero(c.Int64) {
		canoto.Append(&w, canoto__SpecFuzzer__Int64__tag)
		canoto.AppendInt(&w, c.Int64)
	}
	if !canoto.IsZero(c.Uint8) {
		canoto.Append(&w, canoto__SpecFuzzer__Uint8__tag)
		canoto.AppendInt(&w, c.Uint8)
	}
	if !canoto.IsZero(c.Uint16) {
		canoto.Append(&w, canoto__SpecFuzzer__Uint16__tag)
		canoto.AppendInt(&w, c.Uint16)
	}
	if !canoto.IsZero(c.Uint32) {
		canoto.Append(&w, canoto__SpecFuzzer__Uint32__tag)
		canoto.AppendInt(&w, c.Uint32)
	}
	if !canoto.IsZero(c.Uint64) {
		canoto.Append(&w, canoto__SpecFuzzer__Uint64__tag)
		canoto.AppendInt(&w, c.Uint64)
	}
	if !canoto.IsZero(c.Sint8) {
		canoto.Append(&w, canoto__SpecFuzzer__Sint8__tag)
		canoto.AppendSint(&w, c.Sint8)
	}
	if !canoto.IsZero(c.Sint16) {
		canoto.Append(&w, canoto__SpecFuzzer__Sint16__tag)
		canoto.AppendSint(&w, c.Sint16)
	}
	if !canoto.IsZero(c.Sint32) {
		canoto.Append(&w, canoto__SpecFuzzer__Sint32__tag)
		canoto.AppendSint(&w, c.Sint32)
	}
	if !canoto.IsZero(c.Sint64) {
		canoto.Append(&w, canoto__SpecFuzzer__Sint64__tag)
		canoto.AppendSint(&w, c.Sint64)
	}
	if !canoto.IsZero(c.Fixed32) {
		canoto.Append(&w, canoto__SpecFuzzer__Fixed32__tag)
		canoto.AppendFint32(&w, c.Fixed32)
	}
	if !canoto.IsZero(c.Fixed64) {
		canoto.Append(&w, canoto__SpecFuzzer__Fixed64__tag)
		canoto.AppendFint64(&w, c.Fixed64)
	}
	if !canoto.IsZero(c.Sfixed32) {
		canoto.Append(&w, canoto__SpecFuzzer__Sfixed32__tag)
		canoto.AppendFint32(&w, c.Sfixed32)
	}
	if !canoto.IsZero(c.Sfixed64) {
		canoto.Append(&w, canoto__SpecFuzzer__Sfixed64__tag)
		canoto.AppendFint64(&w, c.Sfixed64)
	}
	if !canoto.IsZero(c.Bool) {
		canoto.Append(&w, canoto__SpecFuzzer__Bool__tag)
		canoto.AppendBool(&w, true)
	}
	if len(c.String) != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__String__tag)
		canoto.AppendBytes(&w, c.String)
	}
	if len(c.Bytes) != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__Bytes__tag)
		canoto.AppendBytes(&w, c.Bytes)
	}
	if c.LargestFieldNumber != nil {
		if fieldSize := (c.LargestFieldNumber).CachedCanotoSize(); fieldSize != 0 {
			canoto.Append(&w, canoto__SpecFuzzer__LargestFieldNumber__tag)
			canoto.AppendInt(&w, int64(fieldSize))
			w = (c.LargestFieldNumber).MarshalCanotoInto(w)
		}
	}
	if len(c.RepeatedInt8) != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedInt8__tag)
		canoto.AppendInt(&w, int64(c.canotoData.RepeatedInt8Size.Load()))
		for _, v := range c.RepeatedInt8 {
			canoto.AppendInt(&w, v)
		}
	}
	if len(c.RepeatedInt16) != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedInt16__tag)
		canoto.AppendInt(&w, int64(c.canotoData.RepeatedInt16Size.Load()))
		for _, v := range c.RepeatedInt16 {
			canoto.AppendInt(&w, v)
		}
	}
	if len(c.RepeatedInt32) != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedInt32__tag)
		canoto.AppendInt(&w, int64(c.canotoData.RepeatedInt32Size.Load()))
		for _, v := range c.RepeatedInt32 {
			canoto.AppendInt(&w, v)
		}
	}
	if len(c.RepeatedInt64) != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedInt64__tag)
		canoto.AppendInt(&w, int64(c.canotoData.RepeatedInt64Size.Load()))
		for _, v := range c.RepeatedInt64 {
			canoto.AppendInt(&w, v)
		}
	}
	if len(c.RepeatedUint16) != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedUint16__tag)
		canoto.AppendInt(&w, int64(c.canotoData.RepeatedUint16Size.Load()))
		for _, v := range c.RepeatedUint16 {
			canoto.AppendInt(&w, v)
		}
	}
	if len(c.RepeatedUint32) != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedUint32__tag)
		canoto.AppendInt(&w, int64(c.canotoData.RepeatedUint32Size.Load()))
		for _, v := range c.RepeatedUint32 {
			canoto.AppendInt(&w, v)
		}
	}
	if len(c.RepeatedUint64) != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedUint64__tag)
		canoto.AppendInt(&w, int64(c.canotoData.RepeatedUint64Size.Load()))
		for _, v := range c.RepeatedUint64 {
			canoto.AppendInt(&w, v)
		}
	}
	if len(c.RepeatedSint8) != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedSint8__tag)
		canoto.AppendInt(&w, int64(c.canotoData.RepeatedSint8Size.Load()))
		for _, v := range c.RepeatedSint8 {
			canoto.AppendSint(&w, v)
		}
	}
	if len(c.RepeatedSint16) != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedSint16__tag)
		canoto.AppendInt(&w, int64(c.canotoData.RepeatedSint16Size.Load()))
		for _, v := range c.RepeatedSint16 {
			canoto.AppendSint(&w, v)
		}
	}
	if len(c.RepeatedSint32) != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedSint32__tag)
		canoto.AppendInt(&w, int64(c.canotoData.RepeatedSint32Size.Load()))
		for _, v := range c.RepeatedSint32 {
			canoto.AppendSint(&w, v)
		}
	}
	if len(c.RepeatedSint64) != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedSint64__tag)
		canoto.AppendInt(&w, int64(c.canotoData.RepeatedSint64Size.Load()))
		for _, v := range c.RepeatedSint64 {
			canoto.AppendSint(&w, v)
		}
	}
	if num := len(c.RepeatedFixed32); num != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedFixed32__tag)
		canoto.AppendInt(&w, int64(num*canoto.SizeFint32))
		for _, v := range c.RepeatedFixed32 {
			canoto.AppendFint32(&w, v)
		}
	}
	if num := len(c.RepeatedFixed64); num != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedFixed64__tag)
		canoto.AppendInt(&w, int64(num*canoto.SizeFint64))
		for _, v := range c.RepeatedFixed64 {
			canoto.AppendFint64(&w, v)
		}
	}
	if num := len(c.RepeatedSfixed32); num != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedSfixed32__tag)
		canoto.AppendInt(&w, int64(num*canoto.SizeFint32))
		for _, v := range c.RepeatedSfixed32 {
			canoto.AppendFint32(&w, v)
		}
	}
	if num := len(c.RepeatedSfixed64); num != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedSfixed64__tag)
		canoto.AppendInt(&w, int64(num*canoto.SizeFint64))
		for _, v := range c.RepeatedSfixed64 {
			canoto.AppendFint64(&w, v)
		}
	}
	if num := len(c.RepeatedBool); num != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedBool__tag)
		canoto.AppendInt(&w, int64(num*canoto.SizeBool))
		for _, v := range c.RepeatedBool {
			canoto.AppendBool(&w, v)
		}
	}
	for _, v := range c.RepeatedString {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedString__tag)
		canoto.AppendBytes(&w, v)
	}
	for _, v := range c.RepeatedBytes {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedBytes__tag)
		canoto.AppendBytes(&w, v)
	}
	for i := range c.RepeatedLargestFieldNumber {
		canoto.Append(&w, canoto__SpecFuzzer__RepeatedLargestFieldNumber__tag)
		canoto.AppendInt(&w, int64((&c.RepeatedLargestFieldNumber[i]).CachedCanotoSize()))
		w = (&c.RepeatedLargestFieldNumber[i]).MarshalCanotoInto(w)
	}
	if !canoto.IsZero(c.CustomUint32) {
		canoto.Append(&w, canoto__SpecFuzzer__CustomUint32__tag)
		canoto.AppendFint32(&w, c.CustomUint32)
	}
	if len(c.CustomString) != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__CustomString__tag)
		canoto.AppendBytes(&w, c.CustomString)
	}
	if len(c.CustomBytes) != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__CustomBytes__tag)
		canoto.AppendBytes(&w, c.CustomBytes)
	}
	for _, v := range c.CustomRepeatedBytes {
		canoto.Append(&w, canoto__SpecFuzzer__CustomRepeatedBytes__tag)
		canoto.AppendBytes(&w, v)
	}
	if c.OneOf != nil {
		if fieldSize := (c.OneOf).CachedCanotoSize(); fieldSize != 0 {
			canoto.Append(&w, canoto__SpecFuzzer__OneOf__tag)
			canoto.AppendInt(&w, int64(fieldSize))
			w = (c.OneOf).MarshalCanotoInto(w)
		}
	}
	if c.Pointer != nil {
		if fieldSize := (c.Pointer).CachedCanotoSize(); fieldSize != 0 {
			canoto.Append(&w, canoto__SpecFuzzer__Pointer__tag)
			canoto.AppendInt(&w, int64(fieldSize))
			w = (c.Pointer).MarshalCanotoInto(w)
		}
	}
	if fieldSize := c.Field.CachedCanotoSize(); fieldSize != 0 {
		canoto.Append(&w, canoto__SpecFuzzer__Field__tag)
		canoto.AppendInt(&w, int64(fieldSize))
		w = c.Field.MarshalCanotoInto(w)
	}
	if c.Recursive != nil {
		if fieldSize := (c.Recursive).CachedCanotoSize(); fieldSize != 0 {
			canoto.Append(&w, canoto__SpecFuzzer__Recursive__tag)
			canoto.AppendInt(&w, int64(fieldSize))
			w = (c.Recursive).MarshalCanotoInto(w)
		}
	}
	return w
}

const (
	canoto__LargestFieldNumberSpecFuzzer__Int32__tag = "\xf8\xff\xff\xff\x0f" // canoto.Tag(536870911, canoto.Varint)
)

type canotoData_LargestFieldNumberSpecFuzzer struct {
	size atomic.Int64
}

// CanotoSpec returns the specification of this canoto message.
func (*LargestFieldNumberSpecFuzzer[T1]) CanotoSpec(types ...reflect.Type) *canoto.Spec {
	types = append(types, reflect.TypeOf(LargestFieldNumberSpecFuzzer[T1]{}))
	var zero LargestFieldNumberSpecFuzzer[T1]
	s := &canoto.Spec{
		Name: "LargestFieldNumberSpecFuzzer",
		Fields: []*canoto.FieldType{
			canoto.FieldTypeFromInt(
				/*type:       */ zero.Int32,
				/*FieldNumber:*/ 536870911,
				/*Name:       */ "Int32",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
		},
	}
	s.CalculateCanotoCache()
	return s
}

// MakeCanoto creates a new empty value.
func (*LargestFieldNumberSpecFuzzer[T1]) MakeCanoto() *LargestFieldNumberSpecFuzzer[T1] {
	return new(LargestFieldNumberSpecFuzzer[T1])
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// During parsing, the canoto cache is saved.
func (c *LargestFieldNumberSpecFuzzer[T1]) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// During parsing, the canoto cache is saved.
//
// This function enables configuration of reader options.
func (c *LargestFieldNumberSpecFuzzer[T1]) UnmarshalCanotoFrom(r canoto.Reader) error {
	// Zero the struct before unmarshaling.
	*c = LargestFieldNumberSpecFuzzer[T1]{}
	c.canotoData.size.Store(int64(len(r.B)))

	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 536870911:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.Int32); err != nil {
				return err
			}
			if canoto.IsZero(c.Int32) {
				return canoto.ErrZeroValue
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *LargestFieldNumberSpecFuzzer[T1]) ValidCanoto() bool {
	if c == nil {
		return true
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
func (c *LargestFieldNumberSpecFuzzer[T1]) CalculateCanotoCache() {
	if c == nil {
		return
	}
	var (
		size int
	)
	if !canoto.IsZero(c.Int32) {
		size += len(canoto__LargestFieldNumberSpecFuzzer__Int32__tag) + canoto.SizeInt(c.Int32)
	}
	c.canotoData.size.Store(int64(size))
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *LargestFieldNumberSpecFuzzer[T1]) CachedCanotoSize() int {
	if c == nil {
		return 0
	}
	return int(c.canotoData.size.Load())
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *LargestFieldNumberSpecFuzzer[T1]) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *LargestFieldNumberSpecFuzzer[T1]) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if !canoto.IsZero(c.Int32) {
		canoto.Append(&w, canoto__LargestFieldNumberSpecFuzzer__Int32__tag)
		canoto.AppendInt(&w, c.Int32)
	}
	return w
}

const (
	canoto__OneOfSpecFuzzer__A1__tag = "\x08" // canoto.Tag(1, canoto.Varint)
	canoto__OneOfSpecFuzzer__B1__tag = "\x18" // canoto.Tag(3, canoto.Varint)
	canoto__OneOfSpecFuzzer__B2__tag = "\x20" // canoto.Tag(4, canoto.Varint)
	canoto__OneOfSpecFuzzer__C__tag  = "\x28" // canoto.Tag(5, canoto.Varint)
	canoto__OneOfSpecFuzzer__D__tag  = "\x30" // canoto.Tag(6, canoto.Varint)
	canoto__OneOfSpecFuzzer__A2__tag = "\x38" // canoto.Tag(7, canoto.Varint)
)

type canotoData_OneOfSpecFuzzer struct {
	size atomic.Int64

	AOneOf atomic.Uint32
	BOneOf atomic.Uint32
}

// CanotoSpec returns the specification of this canoto message.
func (*OneOfSpecFuzzer) CanotoSpec(types ...reflect.Type) *canoto.Spec {
	types = append(types, reflect.TypeOf(OneOfSpecFuzzer{}))
	var zero OneOfSpecFuzzer
	s := &canoto.Spec{
		Name: "OneOfSpecFuzzer",
		Fields: []*canoto.FieldType{
			canoto.FieldTypeFromInt(
				/*type:       */ zero.A1,
				/*FieldNumber:*/ 1,
				/*Name:       */ "A1",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "A",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ zero.B1,
				/*FieldNumber:*/ 3,
				/*Name:       */ "B1",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "B",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ zero.B2,
				/*FieldNumber:*/ 4,
				/*Name:       */ "B2",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "B",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ zero.C,
				/*FieldNumber:*/ 5,
				/*Name:       */ "C",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ zero.D,
				/*FieldNumber:*/ 6,
				/*Name:       */ "D",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "",
			),
			canoto.FieldTypeFromInt(
				/*type:       */ zero.A2,
				/*FieldNumber:*/ 7,
				/*Name:       */ "A2",
				/*FixedLength:*/ 0,
				/*Repeated:   */ false,
				/*OneOf:      */ "A",
			),
		},
	}
	s.CalculateCanotoCache()
	return s
}

// MakeCanoto creates a new empty value.
func (*OneOfSpecFuzzer) MakeCanoto() *OneOfSpecFuzzer {
	return new(OneOfSpecFuzzer)
}

// UnmarshalCanoto unmarshals a Canoto-encoded byte slice into the struct.
//
// During parsing, the canoto cache is saved.
func (c *OneOfSpecFuzzer) UnmarshalCanoto(bytes []byte) error {
	r := canoto.Reader{
		B: bytes,
	}
	return c.UnmarshalCanotoFrom(r)
}

// UnmarshalCanotoFrom populates the struct from a canoto.Reader. Most users
// should just use UnmarshalCanoto.
//
// During parsing, the canoto cache is saved.
//
// This function enables configuration of reader options.
func (c *OneOfSpecFuzzer) UnmarshalCanotoFrom(r canoto.Reader) error {
	// Zero the struct before unmarshaling.
	*c = OneOfSpecFuzzer{}
	c.canotoData.size.Store(int64(len(r.B)))

	var minField uint32
	for canoto.HasNext(&r) {
		field, wireType, err := canoto.ReadTag(&r)
		if err != nil {
			return err
		}
		if field < minField {
			return canoto.ErrInvalidFieldOrder
		}

		switch field {
		case 1:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}
			if c.canotoData.AOneOf.Swap(1) != 0 {
				return canoto.ErrDuplicateOneOf
			}

			if err := canoto.ReadInt(&r, &c.A1); err != nil {
				return err
			}
			if canoto.IsZero(c.A1) {
				return canoto.ErrZeroValue
			}
		case 3:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}
			if c.canotoData.BOneOf.Swap(3) != 0 {
				return canoto.ErrDuplicateOneOf
			}

			if err := canoto.ReadInt(&r, &c.B1); err != nil {
				return err
			}
			if canoto.IsZero(c.B1) {
				return canoto.ErrZeroValue
			}
		case 4:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}
			if c.canotoData.BOneOf.Swap(4) != 0 {
				return canoto.ErrDuplicateOneOf
			}

			if err := canoto.ReadInt(&r, &c.B2); err != nil {
				return err
			}
			if canoto.IsZero(c.B2) {
				return canoto.ErrZeroValue
			}
		case 5:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.C); err != nil {
				return err
			}
			if canoto.IsZero(c.C) {
				return canoto.ErrZeroValue
			}
		case 6:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}

			if err := canoto.ReadInt(&r, &c.D); err != nil {
				return err
			}
			if canoto.IsZero(c.D) {
				return canoto.ErrZeroValue
			}
		case 7:
			if wireType != canoto.Varint {
				return canoto.ErrUnexpectedWireType
			}
			if c.canotoData.AOneOf.Swap(7) != 0 {
				return canoto.ErrDuplicateOneOf
			}

			if err := canoto.ReadInt(&r, &c.A2); err != nil {
				return err
			}
			if canoto.IsZero(c.A2) {
				return canoto.ErrZeroValue
			}
		default:
			return canoto.ErrUnknownField
		}

		minField = field + 1
	}
	return nil
}

// ValidCanoto validates that the struct can be correctly marshaled into the
// Canoto format.
//
// Specifically, ValidCanoto ensures:
// 1. All OneOfs are specified at most once.
// 2. All strings are valid utf-8.
// 3. All custom fields are ValidCanoto.
func (c *OneOfSpecFuzzer) ValidCanoto() bool {
	if c == nil {
		return true
	}
	var (
		AOneOf uint32
		BOneOf uint32
	)
	if !canoto.IsZero(c.A1) {
		if AOneOf != 0 {
			return false
		}
		AOneOf = 1
	}
	if !canoto.IsZero(c.B1) {
		if BOneOf != 0 {
			return false
		}
		BOneOf = 3
	}
	if !canoto.IsZero(c.B2) {
		if BOneOf != 0 {
			return false
		}
		BOneOf = 4
	}
	if !canoto.IsZero(c.A2) {
		if AOneOf != 0 {
			return false
		}
		AOneOf = 7
	}
	return true
}

// CalculateCanotoCache populates size and OneOf caches based on the current
// values in the struct.
func (c *OneOfSpecFuzzer) CalculateCanotoCache() {
	if c == nil {
		return
	}
	var (
		size   int
		AOneOf uint32
		BOneOf uint32
	)
	if !canoto.IsZero(c.A1) {
		size += len(canoto__OneOfSpecFuzzer__A1__tag) + canoto.SizeInt(c.A1)
		AOneOf = 1
	}
	if !canoto.IsZero(c.B1) {
		size += len(canoto__OneOfSpecFuzzer__B1__tag) + canoto.SizeInt(c.B1)
		BOneOf = 3
	}
	if !canoto.IsZero(c.B2) {
		size += len(canoto__OneOfSpecFuzzer__B2__tag) + canoto.SizeInt(c.B2)
		BOneOf = 4
	}
	if !canoto.IsZero(c.C) {
		size += len(canoto__OneOfSpecFuzzer__C__tag) + canoto.SizeInt(c.C)
	}
	if !canoto.IsZero(c.D) {
		size += len(canoto__OneOfSpecFuzzer__D__tag) + canoto.SizeInt(c.D)
	}
	if !canoto.IsZero(c.A2) {
		size += len(canoto__OneOfSpecFuzzer__A2__tag) + canoto.SizeInt(c.A2)
		AOneOf = 7
	}
	c.canotoData.size.Store(int64(size))
	c.canotoData.AOneOf.Store(AOneOf)
	c.canotoData.BOneOf.Store(BOneOf)
}

// CachedCanotoSize returns the previously calculated size of the Canoto
// representation from CalculateCanotoCache.
//
// If CalculateCanotoCache has not yet been called, it will return 0.
//
// If the struct has been modified since the last call to CalculateCanotoCache,
// the returned size may be incorrect.
func (c *OneOfSpecFuzzer) CachedCanotoSize() int {
	if c == nil {
		return 0
	}
	return int(c.canotoData.size.Load())
}

// CachedWhichOneOfA returns the previously calculated field number used
// to represent A.
//
// This field is cached by UnmarshalCanoto, UnmarshalCanotoFrom, and
// CalculateCanotoCache.
//
// If the field has not yet been cached, it will return 0.
//
// If the struct has been modified since the field was last cached, the returned
// field number may be incorrect.
func (c *OneOfSpecFuzzer) CachedWhichOneOfA() uint32 {
	return c.canotoData.AOneOf.Load()
}

// CachedWhichOneOfB returns the previously calculated field number used
// to represent B.
//
// This field is cached by UnmarshalCanoto, UnmarshalCanotoFrom, and
// CalculateCanotoCache.
//
// If the field has not yet been cached, it will return 0.
//
// If the struct has been modified since the field was last cached, the returned
// field number may be incorrect.
func (c *OneOfSpecFuzzer) CachedWhichOneOfB() uint32 {
	return c.canotoData.BOneOf.Load()
}

// MarshalCanoto returns the Canoto representation of this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *OneOfSpecFuzzer) MarshalCanoto() []byte {
	c.CalculateCanotoCache()
	w := canoto.Writer{
		B: make([]byte, 0, c.CachedCanotoSize()),
	}
	w = c.MarshalCanotoInto(w)
	return w.B
}

// MarshalCanotoInto writes the struct into a canoto.Writer and returns the
// resulting canoto.Writer. Most users should just use MarshalCanoto.
//
// It is assumed that CalculateCanotoCache has been called since the last
// modification to this struct.
//
// It is assumed that this struct is ValidCanoto.
func (c *OneOfSpecFuzzer) MarshalCanotoInto(w canoto.Writer) canoto.Writer {
	if c == nil {
		return w
	}
	if !canoto.IsZero(c.A1) {
		canoto.Append(&w, canoto__OneOfSpecFuzzer__A1__tag)
		canoto.AppendInt(&w, c.A1)
	}
	if !canoto.IsZero(c.B1) {
		canoto.Append(&w, canoto__OneOfSpecFuzzer__B1__tag)
		canoto.AppendInt(&w, c.B1)
	}
	if !canoto.IsZero(c.B2) {
		canoto.Append(&w, canoto__OneOfSpecFuzzer__B2__tag)
		canoto.AppendInt(&w, c.B2)
	}
	if !canoto.IsZero(c.C) {
		canoto.Append(&w, canoto__OneOfSpecFuzzer__C__tag)
		canoto.AppendInt(&w, c.C)
	}
	if !canoto.IsZero(c.D) {
		canoto.Append(&w, canoto__OneOfSpecFuzzer__D__tag)
		canoto.AppendInt(&w, c.D)
	}
	if !canoto.IsZero(c.A2) {
		canoto.Append(&w, canoto__OneOfSpecFuzzer__A2__tag)
		canoto.AppendInt(&w, c.A2)
	}
	return w
}
